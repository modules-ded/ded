#c3rfbot
from aiogram import Bot, types, executor, Dispatcher
from aiogram.utils.markdown import hlink
import sqlite3 as sq
from aiogram.utils.callback_data import CallbackData
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import datetime
from datetime import timedelta, datetime
import time
import asyncio
from tokenbot import TOKEN
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import random
import emoji
import re
from mines import *
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import Throttled

storage = MemoryStorage()
bot = Bot(token=TOKEN, parse_mode='html')
dp = Dispatcher(bot, storage=storage)
base = sq.connect('game.db')
c = base.cursor()


#menu
menu = ReplyKeyboardMarkup(resize_keyboard=True)
i1 = ['–í–æ–∏–Ω—ã ü•∑', '–†—ã–Ω–æ–∫ ‚õ©Ô∏è', '–ò–≥—Ä–∞—Ç—å üïπ']
i2 = ['–ö–∞–∑–∏–Ω–æ üé≤', '–ö–ª–∞–Ω—ã üèÜ', '–ü—Ä–æ—Ñ–∏–ª—å üñº']
i3 = ['–ò–Ω—Ñ–æ ‚öôÔ∏è', '–°–∫–∞–º üí∏']
i4 = ['–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üéñ']
menu.add(*i1).add(*i2).add(*i3).add(*i4)
men2 = ReplyKeyboardMarkup(resize_keyboard=True)
i1 = ['–ú–∏–Ω—ã üé≤', '–î–∂–µ–∫–§—Ä—É–∫—Ç üé≤']
i2 = ['–ù–∞–∑–∞–¥ üîô']
men2.add(*i1).add(*i2)
# stop menu
# start tasks

# stop tasks
# start inline
buyaur = InlineKeyboardMarkup(row_with=3)
b1 = InlineKeyboardButton(text='500.000 üí∞', callback_data='0_5_mln')
b2 = InlineKeyboardButton(text='1.000.000 üí∞', callback_data='1_mln')
b3 = InlineKeyboardButton(text='5.000.000 üí∞', callback_data='5_mln')
b4 = InlineKeyboardButton(text='10.000.000 üí∞', callback_data='10_mln')
b5 = InlineKeyboardButton(text='25.000.000 üí∞', callback_data='25_mln')
b6 = InlineKeyboardButton(text='50.000.000 üí∞', callback_data='50_mln')
buyaur.add(b1, b2, b3, b4, b5, b6)
# buy aurum
yes1 = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_0_5')
p2 = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='backaurum')
yes1.add(p1, p2)
# 2
yes2 = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_1')
p2 = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='backaurum')
yes2.add(p1, p2)
# 3
yes3 = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_5')
p2 = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='backaurum')
yes3.add(p1, p2)
# 4
yes4 = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_10')
p2 = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='backaurum')
yes4.add(p1, p2)
# 5
yes5 = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_25')
p2 = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='backaurum')
yes5.add(p1, p2)
# 6
yes6 = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_50')
p2 = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='backaurum')
yes6.add(p1, p2)
# stop aurum
pay = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å üí∞', callback_data=f'give')
p2 = InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å üí∞', callback_data=f'giveaway')
pay.add(p1, p2)
info = InlineKeyboardMarkup(row_with=2)
p1 = InlineKeyboardButton(text='–ê—Ç—Ä–∏–±—É—Ç—ã ü™ñ', callback_data=f'atr')
p2 = InlineKeyboardButton(text='–ß–∞—Ç ‚õ±', url='https://t.me/+zq5RhKKFg0s4MGY6')
info.add(p1, p2)
place = InlineKeyboardMarkup(row_with=3)
p1 = InlineKeyboardButton(text='–í–æ–∏–Ω—ã ü•∑', callback_data='voinsbuy')
p2 = InlineKeyboardButton(text='–ó–æ–ª–æ—Ç–æ üí∞', callback_data='aurumbuy')
p3 = InlineKeyboardButton(text='–û–ø—ã—Ç üß©', callback_data='expbuy')
p4 = InlineKeyboardButton(text='–Ø—â–∏–∫–∏ üì¶', callback_data='casebuy')
place.add(p1, p2, p3, p4)
ups = InlineKeyboardMarkup(row_with=5)
p1 = InlineKeyboardButton(text='‚ù§', callback_data=f'hp')
p2 = InlineKeyboardButton(text='üî´', callback_data=f'attack')
p3 = InlineKeyboardButton(text='üõ°', callback_data=f'shit')
p4 = InlineKeyboardButton(text='üí•', callback_data=f'krit')
p5 = InlineKeyboardButton(text='ü¶ã', callback_data=f'uklon')
p6 = InlineKeyboardButton(text='ü¶á', callback_data=f'vampir')
p7 = InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å ‚ÜîÔ∏è', callback_data=f'nexstpers')
ups.add(p1, p2, p3, p4, p5, p6, p7)
                
# stop inline

interval2 = 2400


# –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è state to the FSM
class JoinClanState(StatesGroup):
    id = State()
    
class Form(StatesGroup):
    bam = State() 

async def banka():
    while True:
        minl = c.execute(f'SELECT * FROM voin WHERE voin="1"')
        for user in minl:
            voin = random.randint(2, 20)
            if user[1] != 1:
                c.execute(f'UPDATE voin SET status = {voin} WHERE voin = "1"')
                base.commit() 
            
        await asyncio.sleep(interval2)

c.execute('''CREATE TABLE IF NOT EXISTS users(user_id INTEGER, money INTEGER, voins INTEGER, play INTEGER, exp INTEGER, mmr INTEGER, skam INTEGER, voin1 INTEGER, voin2 INTEGER, voin3 INTEGER, voin4 INTEGER, voin5 INTEGER, voin6 INTEGER, nick TEXT, lose INTEGER, coin INTEGER DEFAULT 0, clan_id, role)''')
c.execute('''CREATE TABLE IF NOT EXISTS clans(clan_id INTEGER, clan_name TEXT, leader_id INTEGER, total_members INTEGER)''')
base.commit()

class CreateClanState(StatesGroup):
    name = State()

MEMBERS_PER_PAGE = 5
        
    

@dp.message_handler(commands=['delactiv'])
async def delad(msg):
    user_id = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user_id}')
    fan = c.fetchone()
    if not fan:
        return
    players.clear()
    await msg.answer('üçÅ | –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã')

@dp.callback_query_handler(text='inviteclan')
async def invite(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    cur = c.fetchone()
    if cur[16] is None:
        await call.message.answer('‚ùï –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ')
        return
    await call.message.answer(f'üÜî <code>{cur[16]}</code> -<b> –≠—Ç–æ ID –∫–ª–∞–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É.</b>')

@dp.callback_query_handler(text='swape')
async def swape(call):
    user_id = call.from_user.id
    await bot.delete_message(user_id, call.message.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('kickclan:'))
async def dip(call):
    user = call.from_user.id
    user_id = int(call.data.split(':')[1])
    c.execute(f'SELECT * FROM users WHERE user_id={user}')
    min = c.fetchone()
    if min[16] is None:
        await call.answer('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ‚ùï')
        return
    if min[17] is None:
        await call.answer('–ò—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä—ã ‚ùï', show_alert=True)
        return
    clan = min[16]
    c.execute(f'SELECT * FROM users WHERE user_id={user_id} AND clan_id={clan}')
    cur = c.fetchone()
    if not cur:
        await call.answer('üéà –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ ‚ùï', show_alert=True)
        return
    c.execute(f'UPDATE users SET clan_id=? WHERE user_id={user_id}',(None,))
    base.commit()
    await call.message.edit_text('<b>üéà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω</b>')

@dp.callback_query_handler(text='editclan')
async def clan_edit(call, state: FSMContext):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if user[16] is None:
        await call.message.answer('<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ‚ùï</b>')
        return
    id = user[16]
    
    c.execute(f'SELECT * FROM clans WHERE clan_id={id}')
    clan = c.fetchone()
    lead = clan[2]
    if user_id != lead:
        await call.answer('üçÅ –î–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–∞–º ‚ùï')
        return
    await call.message.answer('üÜî<b> –í–≤–µ–¥–∏—Ç–µ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª–∞–Ω–∞:</b>')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∫–ª–∞–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(clan_id=id)
    await Form.bam.set()

@dp.message_handler(state=Form.bam)
async def getid(message: types.Message, state: FSMContext):
    user_id_to_check = message.text

    # –î–æ—Å—Ç—É–ø –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    data = await state.get_data()
    clan_id = data.get("clan_id")

    try:
        c.execute(f'SELECT * FROM users WHERE user_id={user_id_to_check} AND clan_id={clan_id}')
        cu = c.fetchone()
        if not cu:
            await message.answer('<b>üÜî –î–∞–Ω–Ω—ã–π ID –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ ‚ùï</b>')
            await state.finish()
            return
        if int(user_id_to_check) == message.from_user.id:
            await message.answer('üéà –ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º–∏–º —Å–æ–±–æ–π')
            await state.finish()
            return
        kb = InlineKeyboardMarkup()
        p1 = InlineKeyboardButton(text='–ò—Å–∫–ª—é—á–∏—Ç—å üéà', callback_data=f'kickclan:{user_id_to_check}')
        p2 = InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å üîª', callback_data='swape')
        kb.add(p1, p2)
        nick = cu[13]
        user_mention = f'<a href="tg://user?id={user_id_to_check}">{nick}</a>'
        role = ""
        if cu[17] == 'leader':
            role = "üèµ –õ–∏–¥–µ—Ä"
        elif cu[17] is None:
            role = "üçÅ –£—á–∞—Å—Ç–Ω–∏–∫"
        await message.answer(f'<b>{user_mention}\n{role}</b>\nüÜî <code>{user_id_to_check}</code>', reply_markup=kb)
        await state.finish()
    except:
        await message.answer('<b>üÜî –£—á–∞—Å—Ç–Ω–∏–∫ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùï</b>')
        await state.finish()
        

    
def create_members_keyboard(clan_id, page):
    keyboard = InlineKeyboardMarkup(row_width=3)
    c.execute(f'SELECT count(*) FROM users WHERE clan_id = {clan_id}')
    num_members = c.fetchone()[0]

    buttons = [InlineKeyboardButton('üè†', callback_data='mainmenuclan'), InlineKeyboardButton('‚òëÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='editclan')]

    if page > 0:
        buttons.append(InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'membersclan_{clan_id}_{page - 1}'))

    if num_members > (page + 1) * MEMBERS_PER_PAGE:
        buttons.append(InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'membersclan_{clan_id}_{page + 1}'))

    keyboard.add(*buttons)
    return keyboard
    
    
async def show_top_clans(page, callback_query):
    offset = page * MEMBERS_PER_PAGE

    c.execute(f'''SELECT clans.clan_id, clans.clan_name, clans.total_members, 
                SUM(users.mmr) as total_mmr FROM clans LEFT JOIN users 
                ON clans.clan_id=users.clan_id GROUP BY clans.clan_id 
                ORDER BY total_mmr DESC, clans.total_members DESC 
                LIMIT {MEMBERS_PER_PAGE} OFFSET {offset}''')
    
    clans_list = c.fetchall()
    message_out = ""
    for i, clan in enumerate(clans_list, start=offset):
        clan_id = clan[0]
        c.execute(f'SELECT count(*) FROM users WHERE clan_id = {clan_id}')
        nu = c.fetchone()[0]
        message_out += f"<b>{i+1} - {clan[1]}\nüèÜ {clan[3]} MMR | üë• {nu}</b>\n"
    
    keyboard = InlineKeyboardMarkup(row_width=3)

    buttons = [InlineKeyboardButton('üè†', callback_data='mainmenuclan')]

    if page > 0: 
        buttons.append(InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'topclans_{page - 1}'))

    if len(clans_list) == MEMBERS_PER_PAGE:
        buttons.append(InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'topclans_{page + 1}'))

    keyboard.add(*buttons)
    await callback_query.message.edit_caption(caption=message_out, reply_markup=keyboard)

@dp.callback_query_handler(text_contains="topclans")
async def topclans_handler(callback_query: types.CallbackQuery):
    page_str = callback_query.data.split('_')[-1]
    page = int(page_str) if page_str.isdigit() else 0
    await show_top_clans(page, callback_query)

@dp.callback_query_handler(text_contains="topclans")
async def topclans_handler(callback_query: types.CallbackQuery):
    page_str = callback_query.data.split('_')[-1]
    page = int(page_str) if page_str.isdigit() else 0
    await show_top_clans(page, callback_query)

async def send_members(clan_id, user_id, page, callback_query):
    offset = page * MEMBERS_PER_PAGE
    c.execute(f'SELECT user_id, nick, mmr, role FROM users WHERE clan_id = {clan_id} LIMIT {MEMBERS_PER_PAGE} OFFSET {offset}')
    members_list = c.fetchall()
    
    message_out = ""
    for i, member in enumerate(members_list, start=offset):
        user_mention = f'<a href="tg://user?id={member[0]}">{member[1]}</a>'
        role = ""
        if member[3] == 'leader':
            role = "üèµ –õ–∏–¥–µ—Ä"
        elif member[3] is None:
            role = "üçÅ –£—á–∞—Å—Ç–Ω–∏–∫"
        message_out += f"<b>{i+1} - {user_mention}\n{role} | {member[2]} MMR</b>\n üÜî <code>{member[0]}</code>\n\n"
        
    await callback_query.message.edit_caption(caption=message_out, reply_markup=create_members_keyboard(clan_id, page))


@dp.callback_query_handler(text_contains="membersclan")
async def membersclan_handler(callback_query: types.CallbackQuery):
    _, clan_id_str, page_str = callback_query.data.split('_')
    clan_id = int(clan_id_str)
    user_id = callback_query.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await callback_query.message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ—Ç–µ, –∑–∞–≤–µ—Å—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ —É –º–µ–Ω—è –≤ –ª—Å ‚ùï')
        return
    if user[16] != int(clan_id):
        await callback_query.answer('–≠—Ç–æ –Ω–µ –≤–∞—à –∫–ª–∞–Ω‚ùï', show_alert=True)
        return
    page = int(page_str)
    await send_members(clan_id, callback_query.from_user.id, page, callback_query)


@dp.callback_query_handler(text_contains="mainmenuclan")
async def mainmenuclan_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ—Ç–µ, –∑–∞–≤–µ—Å—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ —É –º–µ–Ω—è –≤ –ª—Å ‚ùï')
        return
    if user[16] is None:
        await call.answer('–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∞–Ω–∞ ‚ùï', show_alert=True)
        return
    try:
        if (clan_id := user[16]) is None:
            inline_kb = InlineKeyboardMarkup(row_width=2)
            buttons = [
                InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å üí°', callback_data='create_clan'),
                InlineKeyboardButton('–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω üéó', callback_data='join_clan'),
                InlineKeyboardButton('üèÜ –¢–æ–ø –∫–ª–∞–Ω—ã', callback_data='topclans')
            ]
            inline_kb.add(*buttons)
            await call.message.edii_caption(caption="<b>üìì –ú–µ–Ω—é –∫–ª–∞–Ω–æ–≤:</b>", reply_markup=inline_kb)
            return
        c.execute(f'SELECT count(*) FROM users WHERE clan_id = {clan_id}')
        nu = c.fetchone()[0]
        c.execute(f'SELECT * FROM clans WHERE clan_id={clan_id}')
        clan_info = c.fetchone()
        clan_id = clan_info[0]
        clan_name = clan_info[1]
        leader_id = clan_info[2]
        
        c.execute(f'SELECT nick FROM users WHERE user_id={leader_id}')
        leader_name = c.fetchone()[0]
        leader_mention = types.User(id=leader_id, first_name=leader_name).get_mention(as_html=True)

        total_members = clan_info[3]
        c.execute(f'SELECT nick, mmr FROM users WHERE clan_id={clan_id} ORDER BY mmr DESC')
        members_list = c.fetchmany(5)
        total_mmr = c.execute(f'SELECT SUM(mmr) FROM users WHERE clan_id={clan_id}').fetchone()[0]
        message_out = f"<b>üëæ {clan_name}\nüîª –õ–∏–¥–µ—Ä: {leader_mention}\nüèÜ MMR: {total_mmr}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {nu}/20\n\n</b>\n"
        lead = InlineKeyboardMarkup(row_with=2)
        p1 = InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•', callback_data='inviteclan')
        p3 = InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'membersclan_{clan_id}_0')
        p4 = InlineKeyboardButton('üßπ –£–¥–∞–ª–∏—Ç—å', callback_data='deleteclan')
        p2 = InlineKeyboardButton('üèÜ –¢–æ–ø –∫–ª–∞–Ω—ã', callback_data='topclans')
        lead.add(p1, p3, p4, p2)
        op = InlineKeyboardMarkup(row_with=3)
        p1 = InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•', callback_data='inviteclan')
        p3 = InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'membersclan_{clan_id}_0')
        p4 = InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å üéà', callback_data='leaveclan')
        p2 = InlineKeyboardButton('üèÜ –¢–æ–ø –∫–ª–∞–Ω—ã', callback_data='topclans')
        op.add(p1, p3, p4, p2)
        if user_id != leader_id:
            await call.message.edit_caption(caption=message_out, reply_markup=op)
        elif user_id == leader_id:
            await call.message.edit_caption(caption=message_out, reply_markup=lead)
    except Exception as e:
        print(e)
        await call.message.reply('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï</b>')

@dp.callback_query_handler(text='leaveclan')
async def del_clan(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if user[16] is None:
        await call.message.answer('<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ‚ùï</b>')
        return
    id = user[16]
    
    c.execute(f'SELECT * FROM clans WHERE clan_id={id}')
    clan = c.fetchone()
    lead = clan[2]
    if user_id == lead:
        await call.answer('üçÅ –õ–∏–¥–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –≤—ã—Ö–æ–¥–∏—Ç—å —Å–æ —Å–≤–æ–∏—Ö –∂–µ –∫–ª–∞–Ω–æ–≤‚ùï')
        return
    de = InlineKeyboardMarkup()
    yes = InlineKeyboardButton(text='üéà –í—ã–π—Ç–∏', callback_data='leaveyes')
    de.add(yes)
    await call.message.answer('<b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞ ‚ùï</b>', reply_markup=de)

@dp.callback_query_handler(text='leaveyes')
async def del_clan(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if user[16] is None:
        await call.message.answer('<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ‚ùï</b>')
        return
    id = user[16]
    
    c.execute(f'SELECT * FROM clans WHERE clan_id={id}')
    clan = c.fetchone()
    lead = clan[2]
    if user_id == lead:
        await call.answer('üçÅ –õ–∏–¥–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –≤—ã—Ö–æ–¥–∏—Ç—å —Å–æ —Å–≤–æ–∏—Ö –∂–µ –∫–ª–∞–Ω–æ–≤ ‚ùï')
        return
    c.execute('UPDATE users SET clan_id=?, role=? WHERE clan_id=? AND user_id=?',(None, None, id, user_id,))
    base.commit()
    await call.message.edit_text('üéà <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞</b>')

@dp.callback_query_handler(text='deleteclan')
async def del_clan(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if user[16] is None:
        await call.message.answer('<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ‚ùï</b>')
        return
    id = user[16]
    
    c.execute(f'SELECT * FROM clans WHERE clan_id={id}')
    clan = c.fetchone()
    lead = clan[2]
    if user_id != lead:
        await call.answer('üçÅ –î–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–∞–º ‚ùï')
        return
    de = InlineKeyboardMarkup()
    yes = InlineKeyboardButton(text='üéà –£–¥–∞–ª–∏—Ç—å', callback_data='delyes')
    de.add(yes)
    await call.message.answer('<b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –∫–ª–∞–Ω—É –±–µ–∑ –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ‚ùï</b>', reply_markup=de)

@dp.callback_query_handler(text='delyes')
async def del_clan(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if user[16] is None:
        await call.message.answer('<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ‚ùï</b>')
        return
    id = user[16]
    
    c.execute(f'SELECT * FROM clans WHERE clan_id={id}')
    clan = c.fetchone()
    lead = clan[2]
    if user_id != lead:
        await call.answer('üçÅ –î–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–∞–º ‚ùï')
        return
    c.execute(f'DELETE FROM clans WHERE clan_id={id}')
    c.execute('UPDATE users SET clan_id=?, role=? WHERE clan_id=?',(None, None, id,))
    base.commit()
    await call.message.edit_text('üéà <b>–ö–ª–∞–Ω —É–¥–∞–ª–µ–Ω</b>')

@dp.message_handler(text='–ö–ª–∞–Ω—ã üèÜ')
async def clans_handler(message: types.Message):
    user_id = message.from_user.id
    if message.chat.type == "supergroup":
        return
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ—Ç–µ, –∑–∞–≤–µ—Å—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ —É –º–µ–Ω—è –≤ –ª—Å ‚ùï')
        return
    try:
        if (clan_id := user[16]) is None:
            inline_kb = InlineKeyboardMarkup(row_width=2)
            buttons = [
                InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å üí°', callback_data='create_clan'),
                InlineKeyboardButton('–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω üéó', callback_data='join_clan'),
                InlineKeyboardButton('üèÜ –¢–æ–ø –∫–ª–∞–Ω—ã', callback_data='topclans')
            ]
            inline_kb.add(*buttons)
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/clan.png', 'rb'),
                              caption="<b>üìì –ú–µ–Ω—é –∫–ª–∞–Ω–æ–≤:</b>", reply_markup=inline_kb)
            return
        c.execute(f'SELECT * FROM clans WHERE clan_id={clan_id}')
        clan_info = c.fetchone()
        clan_id = clan_info[0]
        clan_name = clan_info[1]
        leader_id = clan_info[2]
        
        c.execute(f'SELECT count(*) FROM users WHERE clan_id = {clan_id}')
        nu = c.fetchone()[0]

        c.execute(f'SELECT nick FROM users WHERE user_id={leader_id}')
        leader_name = c.fetchone()[0]
        leader_mention = types.User(id=leader_id, first_name=leader_name).get_mention(as_html=True)

        total_members = clan_info[3]
        c.execute(f'SELECT nick, mmr FROM users WHERE clan_id={clan_id} ORDER BY mmr DESC')
        members_list = c.fetchmany(5)

        total_mmr = c.execute(f'SELECT SUM(mmr) FROM users WHERE clan_id={clan_id}').fetchone()[0]

        message_out = f"<b>üëæ {clan_name}\nüîª –õ–∏–¥–µ—Ä: {leader_mention}\nüèÜ MMR: {total_mmr}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {nu}/20\n\n</b>\n"

        lead = InlineKeyboardMarkup(row_with=2)
        p1 = InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•', callback_data='inviteclan')
        p3 = InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'membersclan_{clan_id}_0')
        p4 = InlineKeyboardButton('üßπ –£–¥–∞–ª–∏—Ç—å', callback_data='deleteclan')
        p2 = InlineKeyboardButton('üèÜ –¢–æ–ø –∫–ª–∞–Ω—ã', callback_data='topclans')
        lead.add(p1, p3, p4, p2)
        op = InlineKeyboardMarkup(row_with=3)
        p1 = InlineKeyboardButton(text='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•', callback_data='inviteclan')
        p3 = InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'membersclan_{clan_id}_0')
        p4 = InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å üéà', callback_data='leaveclan')
        p2 = InlineKeyboardButton('üèÜ –¢–æ–ø –∫–ª–∞–Ω—ã', callback_data='topclans')
        op.add(p1, p3, p4, p2)
        if user_id != leader_id:
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/clan.png', 'rb'),
                              caption=message_out, reply_markup=op)
        elif user_id == leader_id:
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/clan.png', 'rb'),
                              caption=message_out, reply_markup=lead)
    except Exception as e:
        print(e)
        await message.reply('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï</b>')

@dp.callback_query_handler(text_contains='join_clan')
async def join_clan_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    fu = c.fetchone()
    if fu[16] is not None:
        await callback_query.message.answer('üìã <b>–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.</b>')
        return
    await bot.send_message(user_id, '<b>üìì –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID –∫–ª–∞–Ω–∞</b>:')
    await JoinClanState.id.set()

@dp.message_handler(state=JoinClanState.id)
async def process_join_clan(message: types.Message, state: FSMContext):
    clan_id = message.text
    try:
        clan_info = c.execute(f'SELECT * FROM clans WHERE clan_id={clan_id}').fetchone()

        if not clan_info:
            await bot.send_message(message.from_user.id, '<b>üìì –î–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞ —Å ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùï</b>')
            await state.finish()
            return

        if clan_info[3] >= 20:  # member count
            await bot.send_message(message.from_user.id, '<b>‚ùï –ö–ª–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω</b>')
            await state.finish()
            return

        total_mmr = c.execute(f'SELECT SUM(mmr) FROM users WHERE clan_id={clan_id}').fetchone()[0]
        c.execute(f'SELECT count(*) FROM users WHERE clan_id = {clan_id}')
        nu = c.fetchone()[0]
    
        msg_text = (f"üëæ <b>{clan_info[1]}\n</b>"
                f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {nu}/20</b>\n"
                f"üèÜ <b>MMR: {total_mmr}</b>\n\n"
                "<b>üí° –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –∫–ª–∞–Ω –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–í—Å—Ç—É–ø–∏—Ç—å üî∞¬ª!</b>")

        inline_kb = InlineKeyboardMarkup()
        join_button = InlineKeyboardButton('–í—Å—Ç—É–ø–∏—Ç—å üî∞', callback_data=f'confirm_join_{clan_id}')
        inline_kb.add(join_button)
        await bot.send_message(message.from_user.id, msg_text, reply_markup=inline_kb)
        await state.finish()
    except:
        await bot.send_message(message.from_user.id, '<b>üìì –î–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞ —Å ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùï</b>')
        await state.finish()
        return

@dp.callback_query_handler(text_contains="confirm_join_")
async def confirm_join_clan_handler(callback_data: types.CallbackQuery):
    user_id = callback_data.from_user.id
    clan_id = int(callback_data.data.split('_')[-1])
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    fu = c.fetchone()
    if fu[16] is not None:
        await callback_data.message.answer('üìã <b>–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.</b>')
        return
    c.execute(f'UPDATE users SET clan_id={clan_id} WHERE user_id={user_id}')
    base.commit()

    clan_name = c.execute(f'SELECT clan_name FROM clans WHERE clan_id={clan_id}').fetchone()[0]
    await bot.send_message(user_id, f'<b>üìã –¢–µ–ø–µ—Ä—å –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ ¬´{clan_name}¬ª</b>!')
        
@dp.callback_query_handler(text_contains="create_clan")
async def create_clan_handler(callback_data: types.CallbackQuery):
    user_id = callback_data.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    fu = c.fetchone()
    if fu[16] is not None:
        await callback_data.message.answer('üìã <b>–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.</b>')
        return
    await bot.send_message(user_id, '<b>üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞–Ω–∞</b>:')
    await CreateClanState.name.set()
    
@dp.message_handler(state=CreateClanState.name)
async def process_create_clan(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    clan_name = message.text
    clan_id = random.randint(1, 1e6)
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    fu = c.fetchone()
    if fu[16] is not None:
        await message.answer('üìã <b>–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.</b>')
        return
    while True:
        clan = c.execute(f'SELECT * FROM clans WHERE clan_id={clan_id}').fetchone()
        if clan is None:
            break
        clan_id = random.randint(1, 1e6)
    c.execute(f'INSERT INTO clans VALUES ({clan_id}, "{clan_name}", {user_id}, 1)')
    c.execute(f'UPDATE users SET clan_id={clan_id}, role="leader" WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f'<b>üìì –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–ª–∞–Ω ¬´{clan_name}¬ª</b>!')
    await state.finish()

# FSMContext

class GiveState(StatesGroup):
    dialog = State()
    dialog2 = State()

# stop FSMContext

'''–∫–æ–¥'''
## -*- coding: aiogram-2.19 -*-

player_queue = []
players = {}
game_data = {}
#
fruit_emojis = {"apple": "üçè", "banana": "üçå", "watermelon": "üçâ", "cherry": "üçí", "pear": "üçê", "minus": "‚ùå"}
user_games = {}

@dp.message_handler(commands=['—á–ø–æ–ª–µ'], commands_prefix=".")
async def check(msg):
    id = msg.from_user.id
    c.execute('SELECT * FROM admin WHERE user_id=?',(id,))
    adm = c.fetchone()
    if adm:
        args = msg.text.split()
        if len(args) < 2:
            await msg.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ ID')
            return
        arg = args[1]
        c.execute(f'SELECT * FROM users WHERE user_id={arg}')
        us = c.fetchone()
        if not us:
            await msg.answer('<b>–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ‚ùå</b>')
            return
        if us:
            if int(arg) not in user_games:
                await msg.answer('<b>–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.‚ùå</b>')
                return
            if int(arg) in user_games:
                argf = int(arg)
                field = generate_field(argf)
                await msg.answer(field)
                return
            if not adm:
                return
    

@dp.message_handler(commands=['–ø–µ—Ä–µ–≤–æ–¥', '–ü–µ—Ä–µ–≤–æ–¥'], commands_prefix='+')
async def perevod(msg):
    if msg.chat.type == "private":
        return
    try:
        user_id = msg.from_user.id
        c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
        user = c.fetchone()
        if not user:
            await msg.reply('–£ –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ—Ç–µ, –∑–∞–≤–µ—Å—Ç–∏  –µ–≥–æ –º–æ–∂–Ω–æ —É –º–µ–Ω—è –≤ –ª—Å ‚ùï')
            return
        split = msg.text.split()
        if len(split) != 2:
            await msg.reply('<b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É üí∞</b>')
            return
        amount = int(split[1])
        if not msg.reply_to_message:
            await msg.answer('<b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùï</b>')
            return
        if msg.reply_to_message:
            id = msg.reply_to_message.from_user.id
            if msg.from_user.id == id:
                await msg.reply('<b>–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ ‚ùï</b>')
                return
            c.execute(f'SELECT * FROM users WHERE user_id={id}')
            user2 = c.fetchone()
            if not user2:
                await msg.reply('<b>–£ –¥–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ –∏–≥—Ä–µ ‚ùï</b>')
                return
            if amount <= 0:
                await msg.answer('<b>–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é ‚ùï</b>')
                return
            balance = int(user[1])
            if amount > balance:
                await msg.reply('<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùï</b>')
                return
            new_balance_user = balance - amount
            new_balance_user2 = int(user2[1]) + amount
            c.execute(f'UPDATE users SET money={new_balance_user} WHERE user_id={user_id}')
            c.execute(f'UPDATE users SET money={new_balance_user2} WHERE user_id={id}')
            base.commit()
            name = msg.reply_to_message.from_user.first_name
            await msg.reply(f'<b>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} üí∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name} </b>‚ùï')
    except:
        await msg.reply('<b>–°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ ‚ùï</b>')
        
@dp.message_handler(text=['–î–∂–µ–∫–§—Ä—É–∫—Ç üé≤'])
async def start_game(message: types.Message):
    user_id = message.from_user.id
    if message.chat.type == 'supergroup':
        return
    if user_id in game_data:
        await message.answer('<b>üé≤ –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É ¬´–ú–∏–Ω—ã¬ª</b>')
        return
    if user_id in user_games:
        ('<b>üé≤ –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É ¬´–î–∂–µ–∫–§—Ä—É–∫—Ç¬ª</b>')
        return
    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    base = c.fetchone()

    keyboard = generate_bet_keyboard()
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('bet_'))
async def process_bet(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    bas = c.fetchone()
    money = bas[1]

    bet = int(callback_query.data.split('_')[1])

    if bet > money:
        await callback_query.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {bet - money} üí∞", show_alert=True)
    elif user_id in user_games:
        await callback_query.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ ‚ùï")
    else:
        # –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.
        money -= bet
        c.execute("UPDATE users SET money = ? WHERE user_id = ?", (money, user_id))
        base.commit()

        user_games[user_id] = {'bet': bet, 'grid': generate_grid(), 'cashout_avaialble': False}
        
        keyboard = generate_grid_keyboard(user_id)
        c.execute(f'SELECT * FROM admin WHERE user_id = {user_id}')
        adm = c.fetchone()
        if adm:
            field = generate_field(user_id)
            await bot.edit_message_text("<b>üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É:</b>",
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id,
                                    reply_markup=keyboard)
            await bot.send_message(user_id, field)
            return
        await bot.edit_message_text("<b>üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É:</b>",
                                    callback_query.message.chat.id,
                                    callback_query.message.message_id,
                                    reply_markup=keyboard)

def generate_field(user_id):
    grid = user_games[user_id]['grid']
    field = f"<b>–°–µ–π—á–∞—Å –∏–≥—Ä–æ–∫ –∏–≥—Ä–∞–µ—Ç –≤ üé≤ –î–∂–µ–∫-–§—Ä—É–∫—Ç</b>\nüÜî: <code>{user_id}</code><b>\nüé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ:</b>\n"

    for i, row in enumerate(grid):
        for j, cell in enumerate(row):
            if cell['revealed'] and cell['fruit'] != "minus":
                field += fruit_emojis.get(cell['fruit'], cell['fruit']) + " "
            else:
                field += "‚ùå" if cell['fruit'] == "minus" else fruit_emojis.get(cell['fruit'], "‚¨õÔ∏è") + " "

            if (j+1) % 6 == 0:
                field += "\n"


    return field


@dp.callback_query_handler(lambda c: c.data.startswith('cell_'))
async def process_cell(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_games:
        await callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ‚ùï")
        return

    cell_position = callback_query.data.split('_')[1]
    game = user_games[user_id]
    grid = game['grid']
    selected_cell = grid[int(cell_position[0])][int(cell_position[1])]

    if selected_cell['revealed']:
        await callback_query.answer("–Ø—á–µ–π–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ ‚ùï")
        return

    selected_cell['revealed'] = True
    fruit = selected_cell['fruit']
    bet = game['bet']
    multiplier_dict = {"apple": 2.5, "banana": 1.1, "watermelon": 1.4, "cherry": 1.2, "pear": 1.2, "minus": 0}
    multiplier = multiplier_dict.get(fruit, 1)

    if fruit != "minus":
        game['cashout_avaialble'] = True

    winnings = int(bet * multiplier)
    game['bet'] = winnings

    if fruit == "minus":
        user_games.pop(user_id)
        keyboard = None
        message = "<b> –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É ‚ùï\nüí∞ –í—ã–∏–≥—Ä—ã—à: 0</b>"
    elif check_all_cells_revealed(user_id):
        user_games.pop(user_id)  # —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = None
        message = f"<b>üé≤ –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ —è—á–µ–π–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚ùï\nüí∞ –í—ã–∏–≥—Ä—ã—à: {winnings}</b>"
    else:
        keyboard = generate_grid_keyboard(user_id)
        if game['cashout_avaialble']:
            keyboard.add(types.InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data="cashout"))
        symbol = fruit_emojis.get(fruit, fruit)
        message = f"<b>üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É:\nüí∞ –í—ã–∏–≥—Ä—ã—à: {winnings}</b>"

    await bot.edit_message_text(message,
                                callback_query.message.chat.id,
                                callback_query.message.message_id,
                                reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'cashout')
async def cashout(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_games:
        await callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ‚ùï")
        return
        
    winnings = user_games[user_id]['bet']
    
    c.execute("UPDATE users SET money = money + ? WHERE user_id = ?", (winnings, user_id))
    base.commit()  

    user_games.pop(user_id)
    
    await bot.edit_message_text(f"<b>üí∞ –í—ã–∏–≥—Ä—ã—à: {winnings}</b>",
                                callback_query.message.chat.id,
                                callback_query.message.message_id)


def generate_bet_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    bets = [100, 5000, 10000, 15000, 25000, 50000]

    for bet in bets:
        keyboard.insert(types.InlineKeyboardButton(f"{bet} üí∞", callback_data=f"bet_{bet}"))

    return keyboard


def generate_grid_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup(row_width=6)
    grid = user_games[user_id]['grid']

    for row in grid:
        row_buttons = []
        for cell in row:
            button_text = "‚¨õ" if not cell['revealed'] else fruit_emojis.get(cell['fruit'], cell['fruit'])
            button = types.InlineKeyboardButton(button_text, callback_data=f"cell_{cell['position']}")
            row_buttons.append(button)
        keyboard.row(*row_buttons)

    return keyboard


def generate_grid():
    grid = []
    fruits = ["apple", "banana", "banana", "watermelon", "watermelon", "cherry", "cherry", "pear", "pear",
              "banana", "pear", "cherry", "apple", "minus", "minus", "minus", "minus", "minus"]  
    random.shuffle(fruits)

    for i in range(3):
        row = []
        for j in range(6):   
            cell = {'position': f"{i}{j}", 'revealed': False, 'fruit': fruits.pop()}
            row.append(cell)
        grid.append(row)
    return grid


def check_all_cells_revealed(user_id):
    for row in user_games[user_id]['grid']:
        for cell in row:
            if not cell['revealed']:
                return False
    return True




@dp.message_handler(commands=["–ø—Ä–∞–≤–∞", "—Ä–∞–Ω–≥"], commands_prefix="+")
async def text(msg):
    if msg.from_user.id != 5571724918:
        return

    split = msg.text.split()
    if len(split) != 2:
        await msg.answer('‚ùå <b>–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç. | –¢–∏–ø</b> <code>+–ø—Ä–∞–≤–∞ ¬´–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å¬ª</code>')
        return

    type = split[1]

    if msg.reply_to_message:
        id = msg.reply_to_message.from_user.id
        c.execute(f'SELECT * FROM admin WHERE user_id={id}')
        adm = c.fetchone()

        if type == "–¥–∞—Ç—å":
            if not adm:
                c.execute('INSERT INTO admin VALUES (?)', (id,))
                base.commit()
                await msg.answer('‚úÖ <b>–í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ ¬´–ê–¥–º–∏–Ω¬ª!</b>')
                return
            else:
                await msg.answer('‚ùé <b>–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–≥</b>.')

        if type == "–∑–∞–±—Ä–∞—Ç—å":
            if adm:
                c.execute(f'DELETE FROM admin WHERE user_id={id}')
                base.commit()
                await msg.answer('‚úÖ <b>–í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ ¬´–æ–±—ã—á–Ω–æ–≥–æ¬ª</b>.')
                return
            else:
                await msg.answer('‚ùé <b>–£ –¥–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–≥–æ —Ä–∞–Ω–≥–∞.</b>')
    else:
        await msg.answer('‚ùé<b>–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>')

@dp.message_handler(commands=['addl'])
async def add(msg):
    id = int(msg.text.split()[1])
    if id:
        player_queue.append(id)
        await msg.answer('–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω')
        return
    await msg.answer('–æ—à–∏–±–∫–∞')
    
@dp.message_handler(commands=['bim1230'])
async def mab(msg):
    await msg.answer('–∑–∞–ø—É—â–µ–Ω–æ')
    await banka()

@dp.callback_query_handler(lambda query: query.data.startswith(('presv', 'nexxt', 'pagge', 'buyy'))) 
async def handle_callback(query: types.CallbackQuery): 
    chat_id = query.message.chat.id 

    command, params = query.data.split('_') 

    if command == 'presv': 
        page = int(params) - 1 
    elif command == 'nexxt': 
        page = int(params) + 1 
    elif command == 'pagge': 
        page = int(params) 
    elif command == 'buyy': 
        page = int(params) 
        await make_purchase(chat_id, page, query) 
        return 

    await send_page_data(query.message.chat.id, page, query, query.message.message_id)
    
async def send_page_data(chat_id, page, query, message_id=None): 
    if page > 6:
        page = 1
    elif page < 1:
        page = 6

    if page == 1:
        price = '<b>–û–ø—ã—Ç 400 üß©\n\n10k üí∞</b>'
    elif page == 2:
        price = '<b>–û–ø—ã—Ç 1000 üß©\n\n23k üí∞</b>'
    elif page == 3:
        price = '<b>–û–ø—ã—Ç 1800 üß©\n\n45k</b> üí∞'
    elif page == 4:
        price = '<b>–û–ø—ã—Ç 7000 üß©\n\n125k üí∞</b>'
    elif page == 5:
        price = '<b>–û–ø—ã—Ç 25000 üß©\n\n400k</b> üí∞'
    elif page == 6:
        price = '<b>–û–ø—ã—Ç 37000 üß©\n\n600k</b> üí∞'

    markup = types.InlineKeyboardMarkup(row_width=3)

    markup.row(
        types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=f'buyy_{page}') 
    )
    markup.row(
        types.InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'presv_{page}'),
        types.InlineKeyboardButton(f'{page} | 6', callback_data=f'page_{page}'),
        types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'nexxt_{page}')
    )
    
    if message_id:    
        await query.message.edit_caption(price, reply_markup=markup, parse_mode='html')
    else:
        sent_message = await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/exp.png', 'rb'),
                              caption=price, reply_markup=markup, parse_mode='html')
        return sent_message.message_id 

async def make_purchase(chat_id, page, query):
    c.execute(f'SELECT * FROM users WHERE user_id={chat_id}')
    user = c.fetchone()
    exp = user[4]
    money = user[1]
    if page == 1: 
        price = 400
        amount = 10000
        if money < amount:
            await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {amount - money} üí∞')
            return
        c.execute(f'UPDATE users SET exp={exp + price}, money={money - amount} WHERE user_id={chat_id}')
        base.commit()
        await bot.send_message(chat_id, f'<b>–£—Å–ø–µ—à–Ω–æ!\n\nüß© +{price}\nüí∞ -{amount}</b>', parse_mode='html')
        return
    elif page == 2: 
        price = 1000
        amount = 23000
        if money < amount:
            await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {amount - money} üí∞')
            return
        c.execute(f'UPDATE users SET exp={exp + price}, money={money - amount} WHERE user_id={chat_id}')
        base.commit()
        await bot.send_message(chat_id, f'<b>–£—Å–ø–µ—à–Ω–æ!\n\nüß© +{price}\nüí∞ -{amount}</b>', parse_mode='html')
        return
    elif page == 3: 
        price = 1800
        amount = 45000
        if money < amount:
            await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {amount - money} üí∞')
            return
        c.execute(f'UPDATE users SET exp={exp + price}, money={money - amount} WHERE user_id={chat_id}')
        base.commit()
        await bot.send_message(chat_id, f'<b>–£—Å–ø–µ—à–Ω–æ!\n\nüß© +{price}\nüí∞ -{amount}</b>', parse_mode='html')
        return
    elif page == 4: 
        price = 7000
        amount = 125000
        if money < amount:
            await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {amount - money} üí∞')
            return
        c.execute(f'UPDATE users SET exp={exp + price}, money={money - amount} WHERE user_id={chat_id}')
        base.commit()
        await bot.send_message(chat_id, f'<b>–£—Å–ø–µ—à–Ω–æ!\n\nüß© +{price}\nüí∞ -{amount}</b>', parse_mode='html')
        return
    elif page == 5: 
        price = 25000
        amount = 400000
        if money < amount:
            await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {amount - money} üí∞')
            return
        c.execute(f'UPDATE users SET exp={exp + price}, money={money - amount} WHERE user_id={chat_id}')
        base.commit()
        await bot.send_message(chat_id, f'<b>–£—Å–ø–µ—à–Ω–æ!\n\nüß© +{price}\nüí∞ -{amount}</b>', parse_mode='html')
        return
    elif page == 6: 
        price = 37000
        amount = 600000
        if money < amount:
            await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {amount - money} üí∞')
            return
        c.execute(f'UPDATE users SET exp={exp + price}, money={money - amount} WHERE user_id={chat_id}')
        base.commit()
        await bot.send_message(chat_id, f'<b>–£—Å–ø–µ—à–Ω–æ!\n\nüß© +{price}\nüí∞ -{amount}</b>', parse_mode='html')
        return
    
@dp.callback_query_handler(text='casebuy')
async def buyexp(call):
    page = 1 
    await case(call.from_user.id, page, call)

@dp.callback_query_handler(text='casepagge')
async def ga(call):
    await call.answer()
    pass
 
@dp.callback_query_handler(lambda call: call.data.startswith('casechoice_'))
async def km(call):
    user_id = call.from_user.id
    page = int(call.data.split('_')[1]) 
    if page == 1:
        await call.answer('üìä –®–∞–Ω—Å—ã:\n–í–æ–∏–Ω: 1%', show_alert=True)
        return
    if page == 2:
        await call.answer('üìä –®–∞–Ω—Å—ã:\n–í–æ–∏–Ω: 3%', show_alert=True)
        return
    if page == 3:
        await call.answer('üìä –®–∞–Ω—Å—ã:\n–í–æ–∏–Ω: 6%', show_alert=True)
        return
    if page == 4:
        await call.answer('üìä –®–∞–Ω—Å—ã:\n–í–æ–∏–Ω: 12%', show_alert=True)
        return
    if page == 5:
        await call.answer('üìä –®–∞–Ω—Å—ã:\n–í–æ–∏–Ω: 20%', show_alert=True)
        return
    if page == 6:
        await call.answer('üìä –®–∞–Ω—Å—ã:\n–í–æ–∏–Ω: 35%', show_alert=True)
        return
 
@dp.callback_query_handler(lambda query: query.data.startswith(('casepresv', 'casenexxt', 'casepagge', 'casebuyy'))) 
async def handle_callback(query: types.CallbackQuery): 
    chat_id = query.message.chat.id 

    command, params = query.data.split('_') 

    if command == 'casepresv': 
        page = int(params) - 1 
    elif command == 'casenexxt': 
        page = int(params) + 1 
    elif command == 'casepagge': 
        page = int(params) 
    elif command == 'casebuyy': 
        page = int(params) 
        await makecase(chat_id, page, query) 
        return 

    await case(query.message.chat.id, page, query, query.message.message_id)

async def case(chat_id, page, query, message_id=None): 
    if page > 7:
        page = 1
    elif page < 1:
        page = 7

    if page == 1:
        price = '<b>–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –Ø—â–∏–∫\n\n1k üí∞</b>'
    elif page == 2:
        price = '<b>–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —è—â–∏–∫\n\n3k üí∞</b>'
    elif page == 3:
        price = '<b>–ó–æ–ª–æ—Ç–æ–π –Ø—â–∏–∫\n\n10k</b> üí∞'
    elif page == 4:
        price = '<b>–ò–∑—É–º—Ä—É–¥–Ω—ã–π —è—â–∏–∫\n\n25k üí∞</b>'
    elif page == 5:
        price = '<b>–ù–µ–∑–µ—Ä–∏—Ç–æ–≤—ã–π —è—â–∏–∫\n\n52k</b> üí∞'
    elif page == 6:
        price = '<b>–ù–µ–æ–Ω–æ–≤—ã–π —è—â–∏–∫\n\n125k</b> üí∞'
    elif page == 7:
        price = '<b>–Ø—â–∏–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n\n100 üíé</b>'

    markup = types.InlineKeyboardMarkup(row_width=2)

    markup.row(
        types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å üîë', callback_data=f'casebuyy_{page}'),
        types.InlineKeyboardButton('–®–∞–Ω—Å—ã üìä', callback_data=f'casechoice_{page}')
    )
    markup.row(
        types.InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'casepresv_{page}'),
        types.InlineKeyboardButton(f'{page} | 6', callback_data=f'casepagge'),
        types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'casenexxt_{page}')
    )
    
    if message_id:    
        await query.message.edit_caption(price, reply_markup=markup, parse_mode='html')
    else:
        sent_message = await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/case.png', 'rb'),
                              caption=price, reply_markup=markup, parse_mode='html')
        return sent_message.message_id 

async def makecase(chat_id, page, query):
    c.execute(f'SELECT * FROM users WHERE user_id={chat_id}')
    user = c.fetchone()
    exp = user[4]
    money = user[1]
    coin = user[15]
    voice = {1: 1000, 2: 3000, 3: 10000, 4: 25000, 5: 52000, 6: 125000}
    if page == 7:
        coins = 100
    if page == 7:    
        if coin < coins:
            await query.answer(f"üíé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {coins - coin}")
            return
    
    if page != 7:
        if money < voice[page]:
            await query.answer(f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {voice[page] - money}")
            return
        
    if page == 1:
        dexp = random.randint(1, 54)
        min = random.randint(500, 800)
        exp += dexp
        money += min
        chance = random.randint(1, 100)
        voin = random.randint(2, 13)
        chosen_voin = ""
        if voin == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif voin == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif voin == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif voin == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif voin == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif voin == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif voin == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif voin == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif voin == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif voin == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif voin == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif voin == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif voin == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            
        if chance == 1:
            c.execute(f'SELECT * FROM pers WHERE user_id={chat_id} AND type={voin}')
            im = c.fetchone()
            if not im:
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                c.execute(f'UPDATE users SET money={money - 1000}, exp={exp} WHERE user_id={chat_id}')
        
                if voin == 2:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 600, 90, 5, 10, 15, 5, 0))
                elif voin == 3:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 120, 10, 10, 10, 10, 0))
                elif voin == 4:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1500, 500, 15, 20, 20, 15, 0))
                elif voin == 5:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6000, 2250, 80, 90, 45, 80, 0))
                elif voin == 6:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 1250, 40, 60, 40, 80, 0))
                elif voin == 7:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 500, 25, 50, 30, 60, 0))
                elif voin == 8:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 3200, 550, 8, 40, 55, 20, 0))
                elif voin == 9:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2000, 280, 10, 60, 35, 40, 0))
                elif voin == 10:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 4500, 1200, 65, 75, 40, 85, 0))
                elif voin == 11:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 350, 13, 65, 35, 40, 0))
                elif voin == 12:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6200, 2250, 80, 80, 65, 90, 0))
                elif voin == 13:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 5200, 1350, 80, 70, 70, 80, 0))
                    base.commit()
                await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
                await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
                await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/bot{voin}.png', 'rb'),
                              caption=f"ü•∑ <b>–ù–æ–≤—ã–π –≤–æ–∏–Ω {chosen_voin}</b>!")
                return
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 1000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
        else:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 1000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
    
    if page == 2:
        dexp = random.randint(1, 100)
        min = random.randint(1000, 2000)
        exp += dexp
        money += min
        chance = random.randint(1, 100)
        voin = random.randint(2, 13)
        chosen_voin = ""
        if voin == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif voin == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif voin == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif voin == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif voin == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif voin == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif voin == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif voin == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif voin == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif voin == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif voin == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif voin == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif voin == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            
        if chance <= 3:
            c.execute(f'SELECT * FROM pers WHERE user_id={chat_id} AND type={voin}')
            im = c.fetchone()
            if not im:
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                c.execute(f'UPDATE users SET money={money - 3000}, exp={exp} WHERE user_id={chat_id}')
        
                if voin == 2:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 600, 90, 5, 10, 15, 5, 0))
                elif voin == 3:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 120, 10, 10, 10, 10, 0))
                elif voin == 4:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1500, 500, 15, 20, 20, 15, 0))
                elif voin == 5:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6000, 2250, 80, 90, 45, 80, 0))
                elif voin == 6:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 1250, 40, 60, 40, 80, 0))
                elif voin == 7:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 500, 25, 50, 30, 60, 0))
                elif voin == 8:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 3200, 550, 8, 40, 55, 20, 0))
                elif voin == 9:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2000, 280, 10, 60, 35, 40, 0))
                elif voin == 10:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 4500, 1200, 65, 75, 40, 85, 0))
                elif voin == 11:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 350, 13, 65, 35, 40, 0))
                elif voin == 12:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6200, 2250, 80, 80, 65, 90, 0))
                elif voin == 13:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 5200, 1350, 80, 70, 70, 80, 0))
                    base.commit()
                await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
                await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
                await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/bot{voin}.png', 'rb'),
                              caption=f"ü•∑ <b>–ù–æ–≤—ã–π –≤–æ–∏–Ω {chosen_voin}</b>!")
                return
            c.execute(f'UPDATE users SET money={money - 3000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
        else:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 3000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
            
    if page == 3:
        dexp = random.randint(1, 150)
        min = random.randint(5000, 8000)
        exp += dexp
        money += min
        chance = random.randint(1, 100)
        voin = random.randint(2, 13)
        chosen_voin = ""
        if voin == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif voin == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif voin == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif voin == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif voin == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif voin == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif voin == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif voin == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif voin == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif voin == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif voin == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif voin == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif voin == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            
        if chance <= 6:
            c.execute(f'SELECT * FROM pers WHERE user_id={chat_id} AND type={voin}')
            im = c.fetchone()
            if not im:
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                c.execute(f'UPDATE users SET money={money - 10000}, exp={exp} WHERE user_id={chat_id}')
        
                if voin == 2:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 600, 90, 5, 10, 15, 5, 0))
                elif voin == 3:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 120, 10, 10, 10, 10, 0))
                elif voin == 4:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1500, 500, 15, 20, 20, 15, 0))
                elif voin == 5:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6000, 2250, 80, 90, 45, 80, 0))
                elif voin == 6:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 1250, 40, 60, 40, 80, 0))
                elif voin == 7:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 500, 25, 50, 30, 60, 0))
                elif voin == 8:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 3200, 550, 8, 40, 55, 20, 0))
                elif voin == 9:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2000, 280, 10, 60, 35, 40, 0))
                elif voin == 10:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 4500, 1200, 65, 75, 40, 85, 0))
                elif voin == 11:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 350, 13, 65, 35, 40, 0))
                elif voin == 12:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6200, 2250, 80, 80, 65, 90, 0))
                elif voin == 13:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 5200, 1350, 80, 70, 70, 80, 0))
                    base.commit()
                await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
                await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
                await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/bot{voin}.png', 'rb'),
                              caption=f"ü•∑ <b>–ù–æ–≤—ã–π –≤–æ–∏–Ω {chosen_voin}</b>!")
                return
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 10000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
        else:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 10000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
    
    if page == 4:
        dexp = random.randint(1, 200)
        min = random.randint(16000, 20000)
        exp += dexp
        money += min
        chance = random.randint(1, 100)
        voin = random.randint(2, 13)
        chosen_voin = ""
        if voin == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif voin == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif voin == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif voin == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif voin == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif voin == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif voin == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif voin == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif voin == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif voin == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif voin == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif voin == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif voin == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            
        if chance <= 12:
            c.execute(f'SELECT * FROM pers WHERE user_id={chat_id} AND type={voin}')
            im = c.fetchone()
            if not im:
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                c.execute(f'UPDATE users SET money={money - 25000}, exp={exp} WHERE user_id={chat_id}')
        
                if voin == 2:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 600, 90, 5, 10, 15, 5, 0))
                elif voin == 3:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 120, 10, 10, 10, 10, 0))
                elif voin == 4:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1500, 500, 15, 20, 20, 15, 0))
                elif voin == 5:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6000, 2250, 80, 90, 45, 80, 0))
                elif voin == 6:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 1250, 40, 60, 40, 80, 0))
                elif voin == 7:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 500, 25, 50, 30, 60, 0))
                elif voin == 8:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 3200, 550, 8, 40, 55, 20, 0))
                elif voin == 9:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2000, 280, 10, 60, 35, 40, 0))
                elif voin == 10:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 4500, 1200, 65, 75, 40, 85, 0))
                elif voin == 11:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 350, 13, 65, 35, 40, 0))
                elif voin == 12:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6200, 2250, 80, 80, 65, 90, 0))
                elif voin == 13:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 5200, 1350, 80, 70, 70, 80, 0))
                    base.commit()
                await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
                await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
                await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/bot{voin}.png', 'rb'),
                              caption=f"ü•∑ <b>–ù–æ–≤—ã–π –≤–æ–∏–Ω {chosen_voin}</b>!")
                return
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 25000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
        else:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 25000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
            
    if page == 5:
        dexp = random.randint(1, 250)
        min = random.randint(32000, 45000)
        exp += dexp
        money += min
        chance = random.randint(1, 100)
        voin = random.randint(2, 13)
        chosen_voin = ""
        if voin == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif voin == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif voin == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif voin == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif voin == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif voin == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif voin == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif voin == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif voin == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif voin == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif voin == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif voin == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif voin == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            
        if chance <= 20:
            c.execute(f'SELECT * FROM pers WHERE user_id={chat_id} AND type={voin}')
            im = c.fetchone()
            if not im:
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                c.execute(f'UPDATE users SET money={money - 52000}, exp={exp} WHERE user_id={chat_id}')
        
                if voin == 2:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 600, 90, 5, 10, 15, 5, 0))
                elif voin == 3:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 120, 10, 10, 10, 10, 0))
                elif voin == 4:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1500, 500, 15, 20, 20, 15, 0))
                elif voin == 5:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6000, 2250, 80, 90, 45, 80, 0))
                elif voin == 6:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 1250, 40, 60, 40, 80, 0))
                elif voin == 7:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 500, 25, 50, 30, 60, 0))
                elif voin == 8:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 3200, 550, 8, 40, 55, 20, 0))
                elif voin == 9:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2000, 280, 10, 60, 35, 40, 0))
                elif voin == 10:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 4500, 1200, 65, 75, 40, 85, 0))
                elif voin == 11:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 350, 13, 65, 35, 40, 0))
                elif voin == 12:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6200, 2250, 80, 80, 65, 90, 0))
                elif voin == 13:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 5200, 1350, 80, 70, 70, 80, 0))
                    base.commit()
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
                await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
                await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/bot{voin}.png', 'rb'),
                              caption=f"ü•∑ <b>–ù–æ–≤—ã–π –≤–æ–∏–Ω {chosen_voin}</b>!")
                return
            c.execute(f'UPDATE users SET money={money - 52000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
        else:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 52000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
            
    if page == 6:
        dexp = random.randint(1, 300)
        min = random.randint(50000, 75000)
        exp += dexp
        money += min
        chance = random.randint(1, 100)
        voin = random.randint(2, 13)
        chosen_voin = ""
        if voin == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif voin == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif voin == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif voin == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif voin == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif voin == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif voin == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif voin == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif voin == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif voin == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif voin == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif voin == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif voin == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            
        if chance <= 35:
            c.execute(f'SELECT * FROM pers WHERE user_id={chat_id} AND type={voin}')
            im = c.fetchone()
            if not im:
                await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                c.execute(f'UPDATE users SET money={money - 125000}, exp={exp} WHERE user_id={chat_id}')
        
                if voin == 2:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 600, 90, 5, 10, 15, 5, 0))
                elif voin == 3:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 120, 10, 10, 10, 10, 0))
                elif voin == 4:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1500, 500, 15, 20, 20, 15, 0))
                elif voin == 5:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6000, 2250, 80, 90, 45, 80, 0))
                elif voin == 6:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 1250, 40, 60, 40, 80, 0))
                elif voin == 7:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 1250, 500, 25, 50, 30, 60, 0))
                elif voin == 8:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 3200, 550, 8, 40, 55, 20, 0))
                elif voin == 9:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2000, 280, 10, 60, 35, 40, 0))
                elif voin == 10:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 4500, 1200, 65, 75, 40, 85, 0))
                elif voin == 11:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 2500, 350, 13, 65, 35, 40, 0))
                elif voin == 12:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 6200, 2250, 80, 80, 65, 90, 0))
                elif voin == 13:
                    c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(chat_id, voin, 0, 5200, 1350, 80, 70, 70, 80, 0))
                    base.commit()
                await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
                await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
                await bot.send_photo(chat_id=chat_id, photo=open(f'/bot/module-deda/bot{voin}.png', 'rb'),
                              caption=f"ü•∑ <b>–ù–æ–≤—ã–π –≤–æ–∏–Ω {chosen_voin}</b>!")
                return
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 125000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
        else:
            await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            c.execute(f'UPDATE users SET money={money - 125000}, exp={exp} WHERE user_id={chat_id}')
            base.commit()
            await bot.send_message(chat_id, f"<b>‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Ä¢\n\nüí∞ +{min}</b>")
            await bot.send_message(chat_id, f"<b>‚Ä¢ –û–ø—ã—Ç ‚Ä¢\n\nüß© +{dexp}</b>")
    
    if page == 7:
        prd = random.randint(1, 4)
        redk = random.randint(1, 3)
        if redk > 1:
            if redk == 2:
                ch = 0.175
                if random.random() < ch:
                    redk = 2
                else:
                    redk = 1
            elif redk == 3:
                ch = 0.15
                if random.random() < ch:
                    redk = 3
                else:
                    redk = 1
        c.execute(f'SELECT * FROM prds WHERE status={"1"}')
        bas = c.fetchone()
        count = int(bas[0] + 1)
        c.execute(f'UPDATE users SET coin={int(coin - 100)} WHERE user_id={chat_id}')
        c.execute('INSERT INTO prd VALUES (?, ?, ?, ?, ?)',(chat_id, prd, redk, 0, count))
        c.execute(f'UPDATE prds SET "index"={count} WHERE status="1"')
        base.commit()
        await bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        await bot.send_message(chat_id, f"<b>‚ú® –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç!</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code> \n<b>{get_prd(prd)}</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}")
            
@dp.callback_query_handler(text='expbuy')
async def buyexp(call):
    page = 1 
    await send_page_data(call.from_user.id, page, call)
    
@dp.callback_query_handler(text='yes_10')
async def yes(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.edit_text('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='html')
        return
    coin = user[15]
    money = user[1]
    price = 2000
    sell = 10000000
    newcoin = coin - price
    newmoney = money + sell
    if coin < price:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {price - coin} üíé')
        return
    c.execute(f'UPDATE users SET coin={newcoin}, money={newmoney} WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f"<b>–£—Å–ø–µ—à–Ω–æ!\n\n-{price} üíé\n+{sell} üí∞</b>", parse_mode='html')
    return

@dp.callback_query_handler(text='yes_50')
async def yes(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.edit_text('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='html')
        return
    coin = user[15]
    money = user[1]
    price = 10000
    sell = 50000000
    newcoin = coin - price
    newmoney = money + sell
    if coin < price:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {price - coin} üíé')
        return
    c.execute(f'UPDATE users SET coin={newcoin}, money={newmoney} WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f"<b>–£—Å–ø–µ—à–Ω–æ!\n\n-{price} üíé\n+{sell} üí∞</b>", parse_mode='html')
    return

@dp.callback_query_handler(text='yes_25')
async def yes(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.edit_text('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='html')
        return
    coin = user[15]
    money = user[1]
    price = 5000
    sell = 25000000
    newcoin = coin - price
    newmoney = money + sell
    if coin < price:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {price - coin} üíé')
        return
    c.execute(f'UPDATE users SET coin={newcoin}, money={newmoney} WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f"<b>–£—Å–ø–µ—à–Ω–æ!\n\n-{price} üíé\n+{sell} üí∞</b>", parse_mode='html')
    return

@dp.callback_query_handler(text='yes_5')
async def yes(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.edit_text('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='html')
        return
    coin = user[15]
    money = user[1]
    price = 1000
    sell = 5000000
    newcoin = coin - price
    newmoney = money + sell
    if coin < price:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {price - coin} üíé')
        return
    c.execute(f'UPDATE users SET coin={newcoin}, money={newmoney} WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f"<b>–£—Å–ø–µ—à–Ω–æ!\n\n-{price} üíé\n+{sell} üí∞</b>", parse_mode='html')
    return

@dp.callback_query_handler(text='yes_1')
async def yes(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.edit_text('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='html')
        return
    coin = user[15]
    money = user[1]
    price = 200
    sell = 1000000
    newcoin = coin - price
    newmoney = money + sell
    if coin < price:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {price - coin} üíé')
        return
    c.execute(f'UPDATE users SET coin={newcoin}, money={newmoney} WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f"<b>–£—Å–ø–µ—à–Ω–æ!\n\n-{price} üíé\n+{sell} üí∞</b>", parse_mode='html')
    return

@dp.callback_query_handler(text='yes_0_5')
async def yes(call):
    user_id = call.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    if not user:
        await call.message.edit_text('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>', parse_mode='html')
        return
    coin = user[15]
    money = user[1]
    price = 100
    sell = 500000
    newcoin = coin - 100
    newmoney = money + sell
    if coin < price:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {price - coin} üíé')
        return
    c.execute(f'UPDATE users SET coin={newcoin}, money={newmoney} WHERE user_id={user_id}')
    base.commit()
    await bot.send_message(user_id, f"<b>–£—Å–ø–µ—à–Ω–æ!\n\n-{price} üíé\n+{sell} üí∞</b>", parse_mode='html')
    return

# show_top
@dp.callback_query_handler(text='5_mln')
async def aurum(call):
    await call.message.edit_text('<b>5.000.000 üí∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 1.000 üíé\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å¬ª</b>', parse_mode='html', reply_markup=yes3)
    
@dp.callback_query_handler(text='10_mln')
async def aurum(call):
    await call.message.edit_text('<b>10.000.000 üí∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 2.000 üíé\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å¬ª</b>', parse_mode='html', reply_markup=yes4)
    
@dp.callback_query_handler(text='25_mln')
async def aurum(call):
    await call.message.edit_text('<b>25.000.000 üí∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 5.000 üíé\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å¬ª</b>', parse_mode='html', reply_markup=yes5)
    
@dp.callback_query_handler(text='50_mln')
async def aurum(call):
    await call.message.edit_text('<b>50.000.000 üí∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 10.000 üíé\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å¬ª</b>', parse_mode='html', reply_markup=yes6)

@dp.callback_query_handler(text='1_mln')
async def aurum(call):
    await call.message.edit_text('<b>1.000.000 üí∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 200 üíé\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å¬ª</b>', parse_mode='html', reply_markup=yes2)
    
@dp.callback_query_handler(text='0_5_mln')
async def aurum(call):
    await call.message.edit_text('<b>500.000 üí∞\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 100 üíé\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å¬ª</b>', parse_mode='html', reply_markup=yes1)

@dp.callback_query_handler(text='backaurum')
async def back(call):
    await call.message.edit_text('üí∞ –ó–æ–ª–æ—Ç–æ:', reply_markup=buyaur)

@dp.callback_query_handler(text='aurumbuy')
async def aurum(call):
    user_id = call.from_user.id
    await bot.send_message(user_id, "üí∞ –ó–æ–ª–æ—Ç–æ:\n\n", reply_markup=buyaur)

# shop stop
import math

# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

@dp.callback_query_handler(text='topref')
async def handle_top_request(call):
    user_id = call.from_user.id
    c.execute("SELECT * FROM users ORDER BY skam DESC LIMIT 30")
    users = c.fetchall()
    position = fetch_user_position(user_id, users)
    total_pages = math.ceil(min(len(users), 30) / 5)

    current_page = (position - 1) // 5 + 1
    await construct_page_message(user_id, users, total_pages, current_page)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('preref|', 'nexref|')))
async def manage_page_controls_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    query = callback_query.data.split('|')

    c.execute("SELECT * FROM users ORDER BY skam DESC LIMIT 30")
    users = c.fetchall()
    
    total_pages = int(query[2])
    current_page = int(query[1])
    
    if query[0] == 'preref' and current_page > 1:
        current_page -= 1
    elif query[0] == 'nexref' and current_page < total_pages:
        current_page += 1
    else:
        await callback_query.answer('–¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚ùå')
    
    await construct_page_message(user_id, users, total_pages, current_page, callback_query.message.message_id)

async def construct_page_message(user_id, users, total_pages, current_page, message_id=None):
    show_users = users[(current_page - 1) * 5: current_page * 5]

    keyboard = InlineKeyboardMarkup()
    prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"preref|{current_page}|{total_pages}")
    page_button = InlineKeyboardButton(f"{current_page} | {total_pages}", callback_data="ignore")
    next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"nexref|{current_page}|{total_pages}")
    keyboard.row(prev_button, page_button, next_button)

    text = ""
    for i, user in enumerate(show_users):
        global_rank = (current_page - 1) * 5 + i + 1
        rank = convert_rank_to_emoji(global_rank) 
        name = user[13]
        mmr = user[6]
        link = f'<a href="tg://user?id={user[0]}">{name}</a>'
        text += f"{rank} - {link}\n{mmr} —á–µ–ª.\n\n"

    text += f"üèÜ –í—ã –Ω–∞ {fetch_user_position(user_id, users)} –º–µ—Å—Ç–µ"

    if message_id is None:
        await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/top.png', 'rb'),
                              caption=text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=text,
            reply_markup=keyboard)

def fetch_user_position(user_id, users):
    for i, user in enumerate(users):
        if user[0] == user_id:
            return i+1
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" 

def convert_rank_to_emoji(global_rank):
    emoji_map = {
        0: '0Ô∏è‚É£', 1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£',
        5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£', 8: '8Ô∏è‚É£', 9: '9Ô∏è‚É£', 10: 'üîü'
    }

    if global_rank <= 10:
        return emoji_map[global_rank]
    else:
        return emoji_map[global_rank // 10] + emoji_map[global_rank % 10]


###########

def get_redk(ren):
    g = 10
    if g == 10:
        m = 1
        if m == 1:
            if ren == 1:
                red = "‚ö™"
            elif ren == 2:
                red = "üü¢"
            elif ren == 3:
                red = "üîµ"
            elif ren == 4:
                red = "üü£"
            elif ren == 5:
                red = "üü°"
            elif ren == 6:
                red = "üü†"
            elif ren == 7:
                red = "üî¥"
            elif ren == 8:
                red = "‚ö´"
            return red

def get_st(ren):
    g = 10
    if g == 10:
        m = 1
        if m == 1:
            if ren == 1:
                red = "–û–±—ã—á–Ω—ã–π"
            elif ren == 2:
                red = "–ù–µ–æ–±—ã—á–Ω—ã–π"
            elif ren == 3:
                red = "–û—Ç–ª–∏—á–Ω—ã–π"
            elif ren == 4:
                red = "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
            elif ren == 5:
                red = "–†–µ–ª–∏–∫—Ç–æ–≤—ã–π"
            elif ren == 6:
                red = "–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π"
            elif ren == 7:
                red = "–≠–ª–∏—Ç–Ω—ã–π"
            elif ren == 8:
                red = "–ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–π"
            return red

def get_prd(id):
    if id == 1:
        name = f'ü™ì –¢–æ–ø–æ—Ä'
    elif id == 2:
        name = f'üßø –ê–º—É–ª–µ—Ç'
    elif id == 3:
        name = f'üî® –ö—É–≤–∞–ª–¥–∞'
    elif id == 4:
        name = 'üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ç—Ä–æ—Ñ–µ–π'
    return name
    
def get_prds(id):
    if id == 1:
        name = f'ü™ì'
    elif id == 2:
        name = f'üßø'
    elif id == 3:
        name = f'üî®'
    elif id == 4:
        name = 'üèÜ'
    return name

def get_desc(id):
    if id == 1:
        name = f'–¢–æ–ø–æ—Ä –æ–±–ª–∞–¥–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –æ–¥–Ω–∏–º —É–¥–∞—Ä–æ–º —É–±–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞,\n—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º.'
    elif id == 2:
        name = f'–ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –≤ –±–æ—é, –∞–º—É–ª–µ—Ç –º–æ–∂–µ—Ç\n–≤–æ—Å–∫—Ä–µ—Å–∏—Ç—å –≤–æ–∏–Ω–∞ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º.'
    elif id == 3:
        name = f'–ö—É–≤–∞–ª–¥–∞ —É–º–Ω–æ–∂–∞–µ—Ç –Ω–∞–Ω–æ—Å–∏–º—ã–π –µ—é —É—Ä–æ–Ω –≤—Ä–∞–≥—É, —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º.'
    elif  id == 4:
        name = f'–£–º–Ω–æ–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—É—é –Ω–∞–≥—Ä–∞–¥—É —Å –±–æ–µ–≤.'
    return name

def get_summ(redk, id):
    c.execute(f'SELECT * FROM users WHERE user_id={id}')
    user = c.fetchone()
    money = int('{:,}'.format(user[1]).replace(',', ''))
    exps = int('{:,}'.format(user[4]).replace(',', ''))
    zv = int('{:,}'.format(user[19]).replace(',', ''))
    pyl = int('{:,}'.format(user[20]).replace(',', ''))
    cards = int('{:,}'.format(user[21]).replace(',', ''))
    coins = int('{:,}'.format(user[15]).replace(',', ''))
    if redk == 1:
        monet = int('{:,}'.format(900000).replace(',', ''))
        exp = int('{:,}'.format(10000).replace(',', ''))
        coin = int('{:,}'.format(25).replace(',', ''))
        card = 1
    elif redk == 2:
        monet = int('{:,}'.format(2700000).replace(',', ''))
        exp = int('{:,}'.format(30000).replace(',', ''))
        coin = int('{:,}'.format(50).replace(',', ''))
        card = 1
    elif redk == 3:
        monet = int('{:,}'.format(8100000).replace(',', ''))
        exp = int('{:,}'.format(90000).replace(',', ''))
        coin = int('{:,}'.format(100).replace(',', ''))
        card = 1
        pul = 1
    elif redk == 4:
        monet = int('{:,}'.format(24300000).replace(',', ''))
        exp = int('{:,}'.format(270000).replace(',', ''))
        coin = int('{:,}'.format(250).replace(',', ''))
        card = 1
        pul = 2
    elif redk == 5:
        monet = int('{:,}'.format(72900000).replace(',', ''))
        exp = int('{:,}'.format(810000).replace(',', ''))
        coin = int('{:,}'.format(500).replace(',', ''))
        card = 1
        pul = 3
    elif redk == 6:
        monet = int('{:,}'.format(218700000).replace(',', ''))
        exp = int('{:,}'.format(2430000).replace(',', ''))
        coin = int('{:,}'.format(1000).replace(',', ''))
        card = 1
        pul = 6
        zvu = 1
    elif redk == 7:
        monet = int('{:,}'.format(656100000).replace(',', ''))
        exp = int('{:,}'.format(7290000).replace(',', ''))
        coin = int('{:,}'.format(2000).replace(',', ''))
        card = 1
        pul = 12
        zvu = 2
    if money >= monet:
        mst = "‚úÖ"
    elif money < monet:
        mst = "‚ùå"
        
    if exps >= exp:
        est = "‚úÖ"
    elif exps < exp:
        est = "‚ùå"
        
    if coins >= coin:
        cst = "‚úÖ"
    elif coins < coin:
        cst = "‚ùå"
        
    if cards >= card:
        crst = "‚úÖ"
    elif cards < card:
        crst = "‚ùå"
    
    txt = "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n"
    if redk in [1, 2]:
        txt += f"{mst} | <b>üí∞ –ó–æ–ª–æ—Ç–æ:</b> {money:,} / {monet:,}\n"
        txt += f"{est} | <b>üß© –û–ø—ã—Ç:</b> {exps:,} / {exp:,}\n"
        txt += f"{cst} | <b>üíé –ö–æ–∏–Ω—ã:</b> {coins:,} / {coin:,}\n"
        txt += f"{crst} | <b>üÉè –ö–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b> {cards} / {card}\n"
        
    elif redk in [3, 4, 5]:
        if isinstance(pul, str):
            pul = int(pul.replace(',', ''))
        if pyl >= pul:
            pst = "‚úÖ"
        elif pyl < pul:
            pst = "‚ùå"
        txt += f"{pst} | <b>‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø—ã–ª—å:</b> {pyl:,} / {pul:,}\n"
        txt += f"{mst} | <b>üí∞ –ó–æ–ª–æ—Ç–æ:</b> {money:,} / {monet:,}\n"
        txt += f"{est} | <b>üß© –û–ø—ã—Ç:</b> {exps:,} / {exp:,}\n"
        txt += f"{cst} | <b>üíé –ö–æ–∏–Ω—ã:</b> {coins:,} / {coin:,}\n"
        txt += f"{crst} | <b>üÉè –ö–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b> {cards} / {card}\n"
        
    elif redk in [6, 7]:
        if isinstance(pul, str):
            pul = int(pul.replace(',', ''))
        if isinstance(zvu, str):
            zvu = int(zvu.replace(',', ''))
        if pyl >= pul:
            pst = "‚úÖ"
        elif pyl < pul:
            pst = "‚ùå"
        if zv >= zvu:
            zst = "‚úÖ"
        elif zv < zvu:
            zst = "‚ùå"
        txt += f"{zst} | <b>üåå –ó–≤–µ–∑–¥–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫:</b> {zv:,} / {zvu:,}\n"
        txt += f"{pst} | <b>‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø—ã–ª—å:</b> {pyl:,} / {pul:,}\n"
        txt += f"{mst} | <b>üí∞ –ó–æ–ª–æ—Ç–æ:</b> {money:,} / {monet:,}\n"
        txt += f"{est} | <b>üß© –û–ø—ã—Ç:</b> {exps:,} / {exp:,}\n"
        txt += f"{cst} | <b>üíé –ö–æ–∏–Ω—ã:</b> {coins:,} / {coin:,}\n"
        txt += f"{crst} | <b>üÉè –ö–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b> {cards} / {card}\n"
    return txt
    
        

def upgrade_prd(id, redk, user_id):
    #1
    if id == 1:
        if redk == 1:
            chance = "0.25"
        elif redk == 2:
            chance = "0.5"
        elif redk == 3:
            chance = "0.75"
        elif redk == 4:
            chance = "1.0"
        elif redk == 5:
            chance = "1.5"
        elif redk == 6:
            chance = "2.0"
        elif redk == 7:
            chance = "3.0"
        elif redk == 8:
            chance = "5.0"
        reu = redk + 1
        if reu == 1:
            ch = "0.25"
        elif reu == 2:
            ch = "0.5"
        elif reu == 3:
            ch = "0.75"
        elif reu == 4:
            ch = "1.0"
        elif reu == 5:
            ch = "1.5"
        elif reu == 6:
            ch = "2.0"
        elif reu == 7:
            ch = "3.0"
        elif reu == 8:
            ch = "5.0"
        txt = ""  
        txt += "<b>‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += f"<b>{get_prd(id)}</b>\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:\n"
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {chance}%\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        if redk >= 8:
            txt += "<b>üí• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!</b>"
            return txt
        txt += "–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:\n"
        redk += 1
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {ch}%\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        redk -= 1
        txt += f"{get_summ(redk, user_id)}"
        return txt
        
    #2
    elif id == 2:
        if redk == 1:
            chance = "2.5"
        elif redk == 2:
            chance = "5.0"
        elif redk == 3:
            chance = "7.5"
        elif redk == 4:
            chance = "10.0"
        elif redk == 5:
            chance = "12.5"
        elif redk == 6:
            chance = "15.0"
        elif redk == 7:
            chance = "20.0"
        elif redk == 8:
            chance = "35.0"
        reu = redk + 1
        if reu == 1:
            ch = "2.5"
        elif reu == 2:
            ch = "5.0"
        elif reu == 3:
            ch = "7.5"
        elif reu == 4:
            ch = "10.0"
        elif reu == 5:
            ch = "12.5"
        elif reu == 6:
            ch = "15.0"
        elif reu == 7:
            ch = "20.0"
        elif reu == 8:
            ch = "35.0"   
        txt = ""  
        txt += "<b>‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += f"<b>{get_prd(id)}</b>\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:\n"
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {chance}%\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        if redk >= 8:
            txt += "<b>üí• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!</b>"
            return txt
        txt += "–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:\n"
        redk += 1
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {ch}%\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        redk -= 1
        txt += f"{get_summ(redk, user_id)}"
        return txt
    
    
    #3
    elif id == 3:
        if redk == 1:
            chance = "2.5"
            x = "1.5"
        elif redk == 2:
            chance = "5.0"
            x = "2.0"
        elif redk == 3:
            x = "3.0"
            chance = "7.5"
        elif redk == 4:
            x = "3.0"
            chance = "10.0"
        elif redk == 5:
            x = "3.0"
            chance = "12.5"
        elif redk == 6:
            x = "3.0"
            chance = "15.0"
        elif redk == 7:
            x = "4.0"
            chance = "30.0"
        elif redk == 8:
            x = "5.0"
            chance = "40.0"
            
        reu = redk + 1
        if reu == 1:
            ch = "2.5"
            xe = "1.5"
        elif reu == 2:
            ch = "5.0"
            xe = "2.0"
        elif reu == 3:
            xe = "3.0"
            ch = "7.5"
        elif reu == 4:
            xe = "3.0"
            ch = "10.0"
        elif reu == 5:
            xe = "3.0"
            ch = "12.5"
        elif reu == 6:
            xe = "3.0"
            ch = "15.0"
        elif reu == 7:
            xe = "4.0"
            ch = "30.0"
        elif reu == 8:
            xe = "5.0"
            ch = "40.0"
        txt = ""  
        txt += "<b>‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += f"<b>{get_prd(id)}</b>\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:\n"
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {chance}%\nüî•<b> –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> {x}√ó\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        if redk >= 8:
            txt += "<b>üí• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!</b>"
            return txt
        txt += "–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:\n"
        redk += 1
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {ch}%\nüî•<b> –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> {xe}√ó\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        redk -= 1
        txt += f"{get_summ(redk, user_id)}"
        
        return txt
   
    elif id == 4:
        if redk == 1:
            chance = "2.5"
            x = "1.1"
            max = "üí∞ –ó–æ–ª–æ—Ç–æ"
        elif redk == 2:
            chance = "3.0"
            x = "1.3"
            max = "üí∞ –ó–æ–ª–æ—Ç–æ"
        elif redk == 3:
            x = "1.6"
            chance = "5.0"
            max = "üß© –û–ø—ã—Ç"
        elif redk == 4:
            x = "2.0"
            chance = "7.5"
            max = "üß© –û–ø—ã—Ç"
        elif redk == 5:
            max = "üíé –ö–æ–∏–Ω—ã"
            x = "2.5"
            chance = "10.0"
        elif redk == 6:
            max = "üíé –ö–æ–∏–Ω—ã"
            x = "3.5"
            chance = "15.0"
        elif redk == 7:
            max = "üèÜ MMR"
            x = "5.5"
            chance = "30.0"
        elif redk == 8:
            max = "üèÜ MMR"
            x = "9.5"
            chance = "60.0"
        
        reu = redk + 1    
        if reu == 1:
            ch = "2.5"
            xe = "1.1"
            maxe = "üí∞ –ó–æ–ª–æ—Ç–æ"
        elif reu == 2:
            ch = "3.0"
            xe = "1.3"
            maxe = "üí∞ –ó–æ–ª–æ—Ç–æ"
        elif reu == 3:
            xe = "1.6"
            ch = "5.0"
            maxe = "üß© –û–ø—ã—Ç"
        elif reu == 4:
            xe = "2.0"
            ch = "7.5"
            maxe = "üß© –û–ø—ã—Ç"
        elif reu == 5:
            maxe = "üíé –ö–æ–∏–Ω—ã"
            xe = "2.5"
            ch = "10.0"
        elif reu == 6:
            maxe = "üíé –ö–æ–∏–Ω—ã"
            xe = "3.5"
            ch = "15.0"
        elif reu == 7:
            maxe = "üèÜ MMR"
            xe = "5.5"
            ch = "30.0"
        elif reu == 8:
            maxe = "üèÜ MMR"
            xe = "9.5"
            ch = "60.0"
            
        txt = ""  
        txt += "<b>‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += f"<b>{get_prd(id)}</b>\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        txt += "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:\n"
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {chance}%\nüî•<b> –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> {x}√ó\nü™Ñ <b>–ú–∞–∫—Å–∏–º—É–º:</b> {max}\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        if redk >= 8:
            txt += "<b>üí• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!</b>"
            return txt
        txt += "–ü–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏—è:\n"
        redk += 1
        txt += f"<b>‚ú® –£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\nüçÄ <b>–®–∞–Ω—Å:</b> {ch}%\nüî•<b> –ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> {xe}√ó\nü™Ñ <b>–ú–∞–∫—Å–∏–º—É–º:</b> {maxe}\n"
        txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
        redk -= 1
        txt += f"{get_summ(redk, user_id)}"
        
        return txt
    

def get_stats(redk, id, user_id, count):
    if id == 1:
        if redk == 1:
            chance = "0.25"
        elif redk == 2:
            chance = "0.5"
        elif redk == 3:
            chance = "0.75"
        elif redk == 4:
            chance = "1.0"
        elif redk == 5:
            chance = "1.5"
        elif redk == 6:
            chance = "2.0"
        elif redk == 7:
            chance = "3.0"
        elif redk == 8:
            chance = "5.0"
            
        txt = f"<b>{get_prd(id)}</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n‚ú® <b>–£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\n¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n<b>üçÄ –®–∞–Ω—Å:</b> {chance}%\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n{get_desc(id)}"
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND redk={redk} AND type={id} AND count={count}')
        g = c.fetchone()
        if g:
            use = g[3]
            if use > 0:
                txt += f"\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\nüñê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç <b>{use}</b>"
        return txt
    elif id == 2:
        if redk == 1:
            chance = "2.5"
        elif redk == 2:
            chance = "5.0"
        elif redk == 3:
            chance = "7.5"
        elif redk == 4:
            chance = "10.0"
        elif redk == 5:
            chance = "12.5"
        elif redk == 6:
            chance = "15.0"
        elif redk == 7:
            chance = "20.0"
        elif redk == 8:
            chance = "35.0"
            
        txt = f"<b>{get_prd(id)}</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n‚ú® <b>–£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\n¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n<b>üçÄ –®–∞–Ω—Å:</b> {chance}%\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n{get_desc(id)}"
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND redk={redk} AND type={id} AND count={count}')
        g = c.fetchone()
        if g:
            use = g[3]
            if use > 0:
                txt += f"\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\nüñê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç <b>{use}</b>"
        return txt
    elif id == 3:
        if redk == 1:
            chance = "2.5"
            x = "1.5"
        elif redk == 2:
            chance = "5.0"
            x = "2.0"
        elif redk == 3:
            x = "3.0"
            chance = "7.5"
        elif redk == 4:
            x = "3.0"
            chance = "10.0"
        elif redk == 5:
            x = "3.0"
            chance = "12.5"
        elif redk == 6:
            x = "3.0"
            chance = "15.0"
        elif redk == 7:
            x = "4.0"
            chance = "30.0"
        elif redk == 8:
            x = "5.0"
            chance = "40.0"
            
        txt = f"<b>{get_prd(id)}</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n‚ú® <b>–£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\n¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n<b>üçÄ –®–∞–Ω—Å:</b> {chance}%\nüî• <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å</b>: {x}√ó\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n{get_desc(id)}"
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND redk={redk} AND type={id} AND count={count}')
        g = c.fetchone()
        if g:
            use = g[3]
            if use > 0:
                txt += f"\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\nüñê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç <b>{use}</b>"
        return txt
    elif id == 4:
        if redk == 1:
            chance = "2.5"
            x = "1.1"
            max = "üí∞ –ó–æ–ª–æ—Ç–æ"
        elif redk == 2:
            chance = "3.0"
            x = "1.3"
            max = "üí∞ –ó–æ–ª–æ—Ç–æ"
        elif redk == 3:
            x = "1.6"
            chance = "5.0"
            max = "üß© –û–ø—ã—Ç"
        elif redk == 4:
            x = "2.0"
            chance = "7.5"
            max = "üß© –û–ø—ã—Ç"
        elif redk == 5:
            max = "üíé –ö–æ–∏–Ω—ã"
            x = "2.5"
            chance = "10.0"
        elif redk == 6:
            max = "üíé –ö–æ–∏–Ω—ã"
            x = "3.5"
            chance = "15.0"
        elif redk == 7:
            max = "üèÜ MMR"
            x = "5.5"
            chance = "30.0"
        elif redk == 8:
            max = "üèÜ MMR"
            x = "9.5"
            chance = "60.0"
        
         
        txt = f"<b>{get_prd(id)}</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n‚ú® <b>–£—Ä–æ–≤–µ–Ω—å:</b> {redk}\n{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\n¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n<b>üçÄ –®–∞–Ω—Å:</b> {chance}%\nüî• <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å</b>: {x}√ó\nü™Ñ <b>–ú–∞–∫—Å–∏–º—É–º</b>: {max}\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n{get_desc(id)}"
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND redk={redk} AND type={id} AND count={count}')
        g = c.fetchone()
        if g:
            use = g[3]
            if use > 0:
                txt += f"\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\nüñê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç <b>{use}</b>"
        return txt

@dp.callback_query_handler(lambda call: call.data.startswith('prdytil_'))
async def sell_prd(call):
    user_id = call.from_user.id
    type, count, redk, page, id= map(int, call.data.split('_')[1:])
    
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return

    rewards = {
        1: (100_000, 1_500, 5),
        2: (300_000, 3_000, 15),
        3: (900_000, 10_000, 15),
        4: (2_700_000, 30_000, 35),
        5: (8_100_000, 90_000, 85, 1, 0),
        6: (24_300_000, 270_000, 200, 2, 0),
        7: (72_900_000, 810_000, 350, 4, 0),
        8: (218_700_000, 2_430_000, 700, 8, 1)
    }

    reward_data = rewards.get(redk, None)
    if reward_data is None:
        await call.answer('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.')
        return

    card = 1
    
    txt = "<b>‚ôª –ü—Ä–µ–¥–º–µ—Ç —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!</b>\n"
    txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
    txt += f"<b>{get_prd(type)}</b>\n"
    txt += f"{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\n"
    txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
    txt += "<b>–ü–æ–ª—É—á–µ–Ω–æ:</b>\n"
    if len(reward_data) > 4 and reward_data[4] > 0:
        txt += f"üåå <b>–ó–≤–µ–∑–¥–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫:</b> {'{:,}'.format(int(reward_data[4]))}\n"
    if len(reward_data) > 3 and reward_data[3] > 0:
        txt += f"‚ú® <b>–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø—ã–ª—å:</b> {'{:,}'.format(int(reward_data[3]))}\n"
    txt += f"üí∞ <b>–ó–æ–ª–æ—Ç–æ:</b> {'{:,}'.format(int(reward_data[0]))}\n"
    txt += f"üß© <b>–û–ø—ã—Ç:</b> {'{:,}'.format(int(reward_data[1]))}\n"
    txt += f"üíé <b>–ö–æ–∏–Ω—ã:</b> {'{:,}'.format(int(reward_data[2]))}\n"
    txt += f"üÉè <b>–ö–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b> {card}\n"

    if redk in [1, 2, 3, 4]:
        c.execute(f'UPDATE users SET money=money+{int(reward_data[0])}, exp=exp+{int(reward_data[1])}, coin=coin+{int(reward_data[2])}, cards=cards+{card} WHERE user_id={user_id}')
    elif redk in [5, 6, 7]:
        c.execute(f'UPDATE users SET money=money+{int(reward_data[0])}, exp=exp+{int(reward_data[1])}, coin=coin+{int(reward_data[2])}, cards=cards+{card}, magp=magp+{int(reward_data[3])} WHERE user_id={user_id}')
    elif redk == 8:
        c.execute(f'UPDATE users SET money=money+{int(reward_data[0])}, exp=exp+{int(reward_data[1])}, coin=coin+{int(reward_data[2])}, cards=cards+{card}, magp=magp+{int(reward_data[3])}, zvo=zvo+{int(reward_data[4])} WHERE user_id={user_id}')
    c.execute(f'DELETE FROM prd WHERE user_id={user_id} AND type={type} AND redk={redk} AND count={count}')
    base.commit()
    markup = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdcancel_1_{user_id}")
    markup.add(b1)
    await call.message.edit_text(txt, reply_markup=markup)

@dp.callback_query_handler(lambda call: call.data.startswith('sellprd_'))
async def sell_prd(call):
    user_id = call.from_user.id
    type, count, redk, page, id = map(int, call.data.split('_')[1:])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return

    rewards = {
        1: (100_000, 1_500, 5),
        2: (300_000, 3_000, 15),
        3: (900_000, 10_000, 15),
        4: (2_700_000, 30_000, 35),
        5: (8_100_000, 90_000, 85, 1),
        6: (24_300_000, 270_000, 200, 2),
        7: (72_900_000, 810_000, 350, 4),
        8: (218_700_000, 2_430_000, 700, 8, 1)
    }

    reward_data = rewards.get(redk, None)
    if reward_data is None:
        await call.answer('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.')
        return

    card = 1
    
    txt = "<b>‚ôª –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n"
    txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
    txt += f"<b>{get_prd(type)}</b>\n"
    txt += f"{get_redk(redk)} <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {get_st(redk)}\n"
    txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
    txt += "<b>–ü–æ–ª—É—á–∏—à—å:</b>\n"
    if len(reward_data) > 4:
        txt += f"üåå <b>–ó–≤–µ–∑–¥–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫:</b> {'{:,}'.format(int(reward_data[4]))}\n"
        
    if len(reward_data) > 3:
        txt += f"‚ú® <b>–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø—ã–ª—å:</b> {'{:,}'.format(int(reward_data[3]))}\n"
    txt += f"üí∞ <b>–ó–æ–ª–æ—Ç–æ:</b> {'{:,}'.format(int(reward_data[0]))}\n"
    txt += f"üß© <b>–û–ø—ã—Ç:</b> {'{:,}'.format(int(reward_data[1]))}\n"
    txt += f"üíé <b>–ö–æ–∏–Ω—ã:</b> {'{:,}'.format(int(reward_data[2]))}\n"
    
    

    txt += f"üÉè <b>–ö–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏:</b> {card}\n"
    txt += "<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n"
    txt += "–£—Ç–∏–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–º–µ—Ç –∏\n–ø–æ–ª—É—á–∏ —á–∞—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤\n–æ–±—Ä–∞—Ç–Ω–æ!"

    markup = InlineKeyboardMarkup(row_width=1)
    b1 = InlineKeyboardButton(text="‚ôªÔ∏è –£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"prdytil_{type}_{count}_{redk}_{page}_{user_id}")
    b2 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}")
    markup.add(b1, b2)

    await call.message.edit_text(txt, reply_markup=markup)
            

@dp.callback_query_handler(lambda call: call.data.startswith('prd_'))
async def choose_prd(call):
    user_id = call.from_user.id
    type = int(call.data.split('_')[1])
    count = int(call.data.split('_')[2])
    redk = int(call.data.split('_')[3])
    page = int(call.data.split('_')[4])
    id = int(call.data.split('_')[5])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    if user_id in players:
        await call.answer('–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç ‚ùï')
        return
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    text = get_stats(redk, type, user_id, count)
    markup = InlineKeyboardMarkup(row_width=3)
    b1 = InlineKeyboardButton(text="üñê", callback_data=f"setslot_{type}_{count}_{redk}_{page}_{user_id}")
    b2 = InlineKeyboardButton(text="‚ú®", callback_data=f"upgrade_{type}_{count}_{redk}_{page}_{user_id}")
    b3 = InlineKeyboardButton(text="‚ôªÔ∏è", callback_data=f"sellprd_{type}_{count}_{redk}_{page}_{user_id}")
    b5 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdcancel_{page}_{user_id}")
    markup.add(b1,b2,b3)
    markup.add(b5)
    await call.message.edit_text(text, reply_markup=markup)
#
@dp.callback_query_handler(lambda call: call.data.startswith('setslot_'))
async def slots(call):
    user_id = call.from_user.id
    type = int(call.data.split('_')[1])
    count = int(call.data.split('_')[2])
    redk = int(call.data.split('_')[3])
    page = int(call.data.split('_')[4])
    id = int(call.data.split('_')[5])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    g1 = 1
    g2 = 2
    g3 = 3
    g4 = 4
    g5 = 5
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    markup = InlineKeyboardMarkup(row_width=5)
    #1
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g1}')
    slot1 = c.fetchone()
    if slot1:
        b1 = InlineKeyboardButton(text=f"{get_prds(slot1[1])}{get_redk(slot1[2])}", callback_data=f"slotaked_1_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b1 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_1_{type}_{count}_{redk}_{page}_{user_id}")
    if user[22] >= 2:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g2}')
        slot2 = c.fetchone()
        if slot2:
            b2 = InlineKeyboardButton(text=f"{get_prds(slot2[1])}{get_redk(slot2[2])}", callback_data=f"slotaked_2_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b2 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_2_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b2 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_2_{page}_{user_id}")
     #3
    if user[22] >= 3:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g3}')
        slot3 = c.fetchone()
        if slot3:
            b3 = InlineKeyboardButton(text=f"{get_prds(slot3[1])}{get_redk(slot3[2])}", callback_data=f"slotaked_3_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b3 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_3_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b3 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_3_{page}_{user_id}")
    #4
    if user[22] >= 4:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g4}')
        slot4 = c.fetchone()
        if slot4:
            b4 = InlineKeyboardButton(text=f"{get_prds(slot4[1])}{get_redk(slot4[2])}", callback_data=f"slotaked_4_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b4 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_4_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b4 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_4_{page}_{user_id}")
    #5
    if user[22] >= 5:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g5}')
        slot5 = c.fetchone()
        if slot5:
            b5 = InlineKeyboardButton(text=f"{get_prds(slot5[1])}{get_redk(slot5[2])}", callback_data=f"slotaked_5_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b5 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_5_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b5 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_5_{page}_{user_id}")
    
    markup.add(b1, b2, b3, b4, b5)
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}"))
    await call.message.edit_text(f"<b>–í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π\n—Ö–æ—á–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:</b>", reply_markup=markup)

#
@dp.callback_query_handler(lambda call: call.data.startswith('slotaked_'))
async def slots(call):
    user_id = call.from_user.id
    slot = int(call.data.split('_')[1])
    type = int(call.data.split('_')[2])
    count = int(call.data.split('_')[3])
    redk = int(call.data.split('_')[4])
    page = int(call.data.split('_')[5])
    id = int(call.data.split('_')[6])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND type={type} AND count!={count} AND use!={0} AND use!={slot}')
    existing_items = c.fetchall()

    if existing_items:
        await call.answer('üò• –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    g1 = 1
    g2 = 2
    g3 = 3
    g4 = 4
    g5 = 5
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={slot}')
    hh = c.fetchone()
    if hh:
        c.execute(f'UPDATE prd SET use={"0"} WHERE user_id={user_id} AND use={slot}')
    c.execute(f'UPDATE prd SET use={slot} WHERE user_id={user_id} AND type={type} AND count={count} AND redk={redk}')
    base.commit()
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    markup = InlineKeyboardMarkup(row_width=5)
    #1
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g1}')
    slot1 = c.fetchone()
    if slot1:
        b1 = InlineKeyboardButton(text=f"{get_prds(slot1[1])}{get_redk(slot1[2])}", callback_data=f"slotaked_1_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b1 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_1_{type}_{count}_{redk}_{page}_{user_id}")
    if user[22] >= 2:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g2}')
        slot2 = c.fetchone()
        if slot2:
            b2 = InlineKeyboardButton(text=f"{get_prds(slot2[1])}{get_redk(slot2[2])}", callback_data=f"slotaked_2_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b2 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_2_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b2 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_2_{page}_{user_id}")
     #3
    if user[22] >= 3:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g3}')
        slot3 = c.fetchone()
        if slot3:
            b3 = InlineKeyboardButton(text=f"{get_prds(slot3[1])}{get_redk(slot3[2])}", callback_data=f"slotaked_3_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b3 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_3_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b3 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_3_{page}_{user_id}")
    #4
    if user[22] >= 4:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g4}')
        slot4 = c.fetchone()
        if slot4:
            b4 = InlineKeyboardButton(text=f"{get_prds(slot4[1])}{get_redk(slot4[2])}", callback_data=f"slotaked_4_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b4 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_4_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b4 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_4_{page}_{user_id}")
    #5
    if user[22] >= 5:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g5}')
        slot5 = c.fetchone()
        if slot5:
            b5 = InlineKeyboardButton(text=f"{get_prds(slot5[1])}{get_redk(slot5[2])}", callback_data=f"slotaked_5_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b5 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_5_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b5 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_5_{page}_{user_id}")
    
    markup.add(b1, b2, b3, b4, b5)
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}"))
    await call.answer(f"{get_redk(redk)} {get_prd(type)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {slot} —Å–ª–æ—Ç.")
    await call.message.edit_text(f"<b>–í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π\n—Ö–æ—á–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:</b>", reply_markup=markup)
#
@dp.callback_query_handler(lambda call: call.data.startswith('slotempty_'))
async def slots(call):
    user_id = call.from_user.id
    slot = int(call.data.split('_')[1])
    type = int(call.data.split('_')[2])
    count = int(call.data.split('_')[3])
    redk = int(call.data.split('_')[4])
    page = int(call.data.split('_')[5])
    id = int(call.data.split('_')[6])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND type={type} AND count!={count} AND use!={0} AND use!={slot}')
    existing_items = c.fetchall()

    if existing_items:
        await call.answer('üò• –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    g1 = 1
    g2 = 2
    g3 = 3
    g4 = 4
    g5 = 5
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={slot}')
    hh = c.fetchone()
    if hh:
        c.execute(f'UPDATE prd SET use={"0"} WHERE user_id={user_id} AND use={slot}')
    c.execute(f'UPDATE prd SET use={slot} WHERE user_id={user_id} AND type={type} AND count={count} AND redk={redk}')
    base.commit()
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    markup = InlineKeyboardMarkup(row_width=5)
    #1
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g1}')
    slot1 = c.fetchone()
    if slot1:
        b1 = InlineKeyboardButton(text=f"{get_prds(slot1[1])}{get_redk(slot1[2])}", callback_data=f"slotaked_1_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b1 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_1_{type}_{count}_{redk}_{page}_{user_id}")
    if user[22] >= 2:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g2}')
        slot2 = c.fetchone()
        if slot2:
            b2 = InlineKeyboardButton(text=f"{get_prds(slot2[1])}{get_redk(slot2[2])}", callback_data=f"slotaked_2_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b2 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_2_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b2 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_2_{page}_{user_id}")
     #3
    if user[22] >= 3:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g3}')
        slot3 = c.fetchone()
        if slot3:
            b3 = InlineKeyboardButton(text=f"{get_prds(slot3[1])}{get_redk(slot3[2])}", callback_data=f"slotaked_3_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b3 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_3_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b3 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_3_{page}_{user_id}")
    #4
    if user[22] >= 4:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g4}')
        slot4 = c.fetchone()
        if slot4:
            b4 = InlineKeyboardButton(text=f"{get_prds(slot4[1])}{get_redk(slot4[2])}", callback_data=f"slotaked_4_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b4 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_4_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b4 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_4_{page}_{user_id}")
    #5
    if user[22] >= 5:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g5}')
        slot5 = c.fetchone()
        if slot5:
            b5 = InlineKeyboardButton(text=f"{get_prds(slot5[1])}{get_redk(slot5[2])}", callback_data=f"slotaked_5_{type}_{count}_{redk}_{page}_{user_id}")
        else:
            b5 = InlineKeyboardButton(text=" ", callback_data=f"slotempty_5_{type}_{count}_{redk}_{page}_{user_id}")
    else:
        b5 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_5_{page}_{user_id}")
    
    markup.add(b1, b2, b3, b4, b5)
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}"))
    await call.answer(f"{get_redk(redk)} {get_prd(type)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {slot} —Å–ª–æ—Ç.")
    await call.message.edit_text(f"<b>–í—ã–±–µ—Ä–∏ —Å–ª–æ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π\n—Ö–æ—á–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:</b>", reply_markup=markup)
#
@dp.callback_query_handler(lambda call: call.data.startswith('slots_'))
async def slots(call):
    user_id = call.from_user.id
    page = int(call.data.split('_')[1])
    id = int(call.data.split('_')[2])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    g1 = 1
    g2 = 2
    g3 = 3
    g4 = 4
    g5 = 5
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    markup = InlineKeyboardMarkup(row_width=5)
    #1
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g1}')
    slot1 = c.fetchone()
    if slot1:
        b1 = InlineKeyboardButton(text=f"{get_prds(slot1[1])}{get_redk(slot1[2])}", callback_data=f"slotclear_1_{page}_{user_id}")
    else:
        b1 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_1_{page}_{user_id}")
    if user[22] >= 2:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g2}')
        slot2 = c.fetchone()
        if slot2:
            b2 = InlineKeyboardButton(text=f"{get_prds(slot2[1])}{get_redk(slot2[2])}", callback_data=f"slotclear_2_{page}_{user_id}")
        else:
            b2 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_2_{page}_{user_id}")
    else:
        b2 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_2_{page}_{user_id}")
     #3
    if user[22] >= 3:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g3}')
        slot3 = c.fetchone()
        if slot3:
            b3 = InlineKeyboardButton(text=f"{get_prds(slot3[1])}{get_redk(slot3[2])}", callback_data=f"slotclear_3_{page}_{user_id}")
        else:
            b3 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_3_{page}_{user_id}")
    else:
        b3 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_3_{page}_{user_id}")
    #4
    if user[22] >= 4:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g4}')
        slot4 = c.fetchone()
        if slot4:
            b4 = InlineKeyboardButton(text=f"{get_prds(slot4[1])}{get_redk(slot4[2])}", callback_data=f"slotclear_4_{page}_{user_id}")
        else:
            b4 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_4_{page}_{user_id}")
    else:
        b4 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_4_{page}_{user_id}")
    #5
    if user[22] >= 5:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g5}')
        slot5 = c.fetchone()
        if slot5:
            b5 = InlineKeyboardButton(text=f"{get_prds(slot5[1])}{get_redk(slot5[2])}", callback_data=f"slotclear_5_{page}_{user_id}")
        else:
            b5 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_5_{page}_{user_id}")
    else:
        b5 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_5_{page}_{user_id}")
    
    markup.add(b1, b2, b3, b4, b5)
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"prdcancel_{page}_{user_id}"))
    await call.message.edit_text(f"<b>–≠—Ç–æ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ\n–ø—Ä–µ–¥–º–µ—Ç—ã.</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n–ö–ª–∏–∫–Ω–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç,\n—á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ—Ç.", reply_markup=markup)
    
@dp.callback_query_handler(lambda call: call.data.startswith('slotclear_'))
async def clesrslot(call):
    user_id = call.from_user.id
    slot = int(call.data.split('_')[1])
    page = int(call.data.split('_')[2])
    id = int(call.data.split('_')[3])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    g1 = 1
    g2 = 2
    g3 = 3
    g4 = 4
    g5 = 5
    j = c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={slot}').fetchone()
    if not j:
        await call.answer("ü´§ –ù–µ—á–µ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å, —Å–ª–æ—Ç –∏ —Ç–∞–∫ –ø—É—Å—Ç–æ–π!")
        return
    if j:
        c.execute(f'UPDATE prd SET use={"0"} WHERE user_id={user_id} AND use={slot}')
        base.commit()
     
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    markup = InlineKeyboardMarkup(row_width=5)
    #1
    c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g1}')
    slot1 = c.fetchone()
    if slot1:
        b1 = InlineKeyboardButton(text=f"{get_prds(slot1[1])}{get_redk(slot1[2])}", callback_data=f"slotclear_1_{page}_{user_id}")
    else:
        b1 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_1_{page}_{user_id}")
    if user[22] >= 2:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g2}')
        slot2 = c.fetchone()
        if slot2:
            b2 = InlineKeyboardButton(text=f"{get_prds(slot2[1])}{get_redk(slot2[2])}", callback_data=f"slotclear_2_{page}_{user_id}")
        else:
            b2 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_2_{page}_{user_id}")
    else:
        b2 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_2_{page}_{user_id}")
     #3
    if user[22] >= 3:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g3}')
        slot3 = c.fetchone()
        if slot3:
            b3 = InlineKeyboardButton(text=f"{get_prds(slot3[1])}{get_redk(slot3[2])}", callback_data=f"slotclear_3_{page}_{user_id}")
        else:
            b3 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_3_{page}_{user_id}")
    else:
        b3 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_3_{page}_{user_id}")
    #4
    if user[22] >= 4:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g4}')
        slot4 = c.fetchone()
        if slot4:
            b4 = InlineKeyboardButton(text=f"{get_prds(slot4[1])}{get_redk(slot4[2])}", callback_data=f"slotclear_4_{page}_{user_id}")
        else:
            b4 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_4_{page}_{user_id}")
    else:
        b4 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_4_{page}_{user_id}")
    #5
    if user[22] >= 5:
        c.execute(f'SELECT * FROM prd WHERE user_id={user_id} AND use={g5}')
        slot5 = c.fetchone()
        if slot5:
            b5 = InlineKeyboardButton(text=f"{get_prds(slot5[1])}{get_redk(slot5[2])}", callback_data=f"slotclear_5_{page}_{user_id}")
        else:
            b5 = InlineKeyboardButton(text=" ", callback_data=f"slotclear_5_{page}_{user_id}")
    else:
        b5 = InlineKeyboardButton(text="üîí", callback_data=f"slotblocked_5_{page}_{user_id}")
    
    markup.add(b1, b2, b3, b4, b5)
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"prdcancel_{page}_{user_id}"))
    await call.answer('üòä –°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω!')
    await call.message.edit_text(f"<b>–≠—Ç–æ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ\n–ø—Ä–µ–¥–º–µ—Ç—ã.</b>\n<code>¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑</code>\n–ö–ª–∏–∫–Ω–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç,\n—á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ—Ç.", reply_markup=markup)
    
@dp.callback_query_handler(lambda call: call.data.startswith('slotblocked_'))
async def clesrslot(call):
    user_id = call.from_user.id
    id = int(call.data.split('_')[3])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    slot = int(call.data.split('_')[1])
    if slot >= 2:
        await call.answer("üîí –°–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.", show_alert=True)

@dp.callback_query_handler(lambda call: call.data.startswith('upgrade_'))
async def chooe_prd(call):
    user_id = call.from_user.id
    type = int(call.data.split('_')[1])
    count = int(call.data.split('_')[2])
    redk = int(call.data.split('_')[3]) 
    page = int(call.data.split('_')[4]) 
    id = int(call.data.split('_')[5])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    if user_id in players:
        await query.answer('–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ‚ùï')
        return
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    text = upgrade_prd(type, redk, user_id)
    markup = InlineKeyboardMarkup(row_width=3)
    b2 = InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å", callback_data=f"prdupgrade_{type}_{count}_{redk}_{page}_{user_id}")
    b1 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}")
    if redk != 8:
        markup.add(b2)
    markup.add(b1)
    await call.message.edit_text(text, reply_markup=markup)

@dp.callback_query_handler(lambda call: call.data.startswith('prdexit_'))
async def prd_upgr(call):
    user_id = call.from_user.id
    type = int(call.data.split('_')[1])
    count = int(call.data.split('_')[2])
    redk = int(call.data.split('_')[3]) 
    page = int(call.data.split('_')[4])
    id = int(call.data.split('_')[5])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    
    text = get_stats(redk, type, user_id, count)
    markup = InlineKeyboardMarkup(row_width=3)
    b1 = InlineKeyboardButton(text="üñê", callback_data=f"setslot_{type}_{count}_{redk}_{page}_{user_id}")
    b2 = InlineKeyboardButton(text="‚ú®", callback_data=f"upgrade_{type}_{count}_{redk}_{page}_{user_id}")
    b3 = InlineKeyboardButton(text="‚ôªÔ∏è", callback_data=f"sellprd_{type}_{count}_{redk}_{page}_{user_id}")
    b5 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdcancel_{page}_{user_id}")
    markup.add(b1,b2,b3)
    markup.add(b5)
    await call.message.edit_text(text, reply_markup=markup)



@dp.callback_query_handler(lambda call: call.data.startswith('prdupgrade_'))
async def prd_upgr(call):
    user_id = call.from_user.id
    type = int(call.data.split('_')[1])
    count = int(call.data.split('_')[2])
    redk = int(call.data.split('_')[3]) 
    page = int(call.data.split('_')[4]) 
    id = int(call.data.split('_')[5])
    if user_id != id:
        await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return
    if user_id in players:
        await query.answer('–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ‚ùï')
        return
    c.execute(f'SELECT * FROM prd WHERE count={count} AND type={type} AND redk={redk} AND user_id={user_id}')
    prd = c.fetchone()
    if not prd:
        await call.answer('üò• –£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    money = int('{:,}'.format(user[1]).replace(',', ''))
    exps = int('{:,}'.format(user[4]).replace(',', ''))
    zv = int('{:,}'.format(user[19]).replace(',', ''))
    pyl = int('{:,}'.format(user[20]).replace(',', ''))
    cards = int('{:,}'.format(user[21]).replace(',', ''))
    coins = int('{:,}'.format(user[15]).replace(',', ''))
    if redk == 1:
        monet = int('{:,}'.format(900000).replace(',', ''))
        exp = int('{:,}'.format(10000).replace(',', ''))
        coin = int('{:,}'.format(25).replace(',', ''))
        card = 1
    elif redk == 2:
        monet = int('{:,}'.format(2700000).replace(',', ''))
        exp = int('{:,}'.format(30000).replace(',', ''))
        coin = int('{:,}'.format(50).replace(',', ''))
        card = 1
    elif redk == 3:
        monet = int('{:,}'.format(8100000).replace(',', ''))
        exp = int('{:,}'.format(90000).replace(',', ''))
        coin = int('{:,}'.format(100).replace(',', ''))
        card = 1
        pul = 1
    elif redk == 4:
        monet = int('{:,}'.format(24300000).replace(',', ''))
        exp = int('{:,}'.format(270000).replace(',', ''))
        coin = int('{:,}'.format(250).replace(',', ''))
        card = 1
        pul = 2
    elif redk == 5:
        monet = int('{:,}'.format(72900000).replace(',', ''))
        exp = int('{:,}'.format(810000).replace(',', ''))
        coin = int('{:,}'.format(500).replace(',', ''))
        card = 1
        pul = 3
    elif redk == 6:
        monet = int('{:,}'.format(218700000).replace(',', ''))
        exp = int('{:,}'.format(2430000).replace(',', ''))
        coin = int('{:,}'.format(1000).replace(',', ''))
        card = 1
        pul = 6
        zvu = 1
    elif redk == 7:
        monet = int('{:,}'.format(656100000).replace(',', ''))
        exp = int('{:,}'.format(7290000).replace(',', ''))
        coin = int('{:,}'.format(2000).replace(',', ''))
        card = 1
        pul = 12
        zvu = 2
    
    if redk in [1, 2]:
        if money < monet:
            await call.answer('üí∞ | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.')
            return
            
        elif exps < exp:
            await call.answer('üß© | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞.')
            return
      
        elif coins < coin:
            await call.answer('üíé | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.')
            return
        
        elif cards < card:
            await call.answer('üÉè | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç—ã —Ä–µ–¥–∫–æ—Å—Ç–∏.')
            return
        redk += 1
        money -= monet
        exps -= exp
        coins -= coin
        cards -= card
        c.execute(f'UPDATE prd SET redk={redk} WHERE user_id={user_id} AND count={count} AND type={type}')
        c.execute(f'UPDATE users SET money={money}, exp={exps}, coin={coins}, cards={cards} WHERE user_id={user_id}')
        base.commit()
        markup = InlineKeyboardMarkup(row_width=3)
        b2 = InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å", callback_data=f"prdupgrade_{type}_{count}_{redk}_{page}_{user_id}")
        b1 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}")
        markup.add(b2)
        markup.add(b1)
        text = upgrade_prd(type, redk, user_id)
        await call.message.edit_text(text, reply_markup=markup)
        
        
    elif redk in [3, 4, 5]:
        if isinstance(pul, str):
            pul = int(pul.replace(',', ''))
        if pyl < pul:
            await call.answer('‚ú® | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–≥–∏—á–µ—Å–∫–æ–π –ø—ã–ª–∏.')
            return
            
        elif money < monet:
            await call.answer('üí∞ | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.')
            return
            
        elif exps < exp:
            await call.answer('üß© | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞.')
            return
      
        elif coins < coin:
            await call.answer('üíé | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.')
            return
        
        elif cards < card:
            await call.answer('üÉè | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç—ã —Ä–µ–¥–∫–æ—Å—Ç–∏.')
            return
        redk += 1
        money -= monet
        exps -= exp
        coins -= coin
        cards -= card
        pyl -= pul
        c.execute(f'UPDATE prd SET redk={redk} WHERE user_id={user_id} AND count={count} AND type={type}')
        c.execute(f'UPDATE users SET money={money}, exp={exps}, coin={coins}, cards={cards}, magp={pyl} WHERE user_id={user_id}')
        base.commit()
        markup = InlineKeyboardMarkup(row_width=3)
        b2 = InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å", callback_data=f"prdupgrade_{type}_{count}_{redk}_{page}_{user_id}")
        b1 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}")
        markup.add(b2)
        markup.add(b1)
        text = upgrade_prd(type, redk, user_id)
        await call.message.edit_text(text, reply_markup=markup)
        
    elif redk in [6, 7]:
        if isinstance(pul, str):
            pul = int(pul.replace(',', ''))
        if isinstance(zvu, str):
            zvu = int(zvu.replace(',', ''))

        if zv < zvu:
            await call.answer('üåå | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤.')
            return
        
        elif pyl < pul:
            await call.answer('‚ú® | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–≥–∏—á–µ—Å–∫–æ–π –ø—ã–ª–∏.')
            return
            
        elif money < monet:
            await call.answer('üí∞ | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.')
            return
            
        elif exps < exp:
            await call.answer('üß© | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞.')
            return
      
        elif coins < coin:
            await call.answer('üíé | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.')
            return
        
        elif cards < card:
            await call.answer('üÉè | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç—ã —Ä–µ–¥–∫–æ—Å—Ç–∏.')
            return
        redk += 1
        money -= monet
        exps -= exp
        coins -= coin
        cards -= card
        pyl -= pul
        zv -= zvu
        c.execute(f'UPDATE prd SET redk={redk} WHERE user_id={user_id} AND count={count} AND type={type}')
        c.execute(f'UPDATE users SET money={money}, exp={exps}, coin={coins}, cards={cards}, magp={pyl}, zvo={zv} WHERE user_id={user_id}')
        base.commit()
        markup = InlineKeyboardMarkup(row_width=3)
        b2 = InlineKeyboardButton(text="‚ú® –£–ª—É—á—à–∏—Ç—å", callback_data=f"prdupgrade_{type}_{count}_{redk}_{page}_{user_id}")
        b1 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prdexit_{type}_{count}_{redk}_{page}_{user_id}")
        if redk != 8:
            markup.add(b2)
        markup.add(b1)
        text = upgrade_prd(type, redk, user_id)
        await call.message.edit_text(text, reply_markup=markup)
    

@dp.callback_query_handler(lambda call: call.data.startswith('prdcancel_'))
async def callh(call):
    pag = int(call.data.split('_')[1])
    id = int(call.data.split('_')[2])
    m = 1
    if m == 1:
        user_id = call.from_user.id
        if user_id != id:
            await call.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
            return
        c.execute('SELECT * FROM prd WHERE user_id=?', (user_id,))
        fighters = c.fetchall()

        change_kb = InlineKeyboardMarkup()

        fighters = sorted(fighters, key=lambda x: x[2], reverse=True)
        row = []
        start = (pag - 1) * 12
        end = start + 12
        for fighter in fighters[start:end]:
            fighter_id = fighter[1]
            reg = fighter[2]

            name = get_prds(fighter_id)
            redk = get_redk(reg)
            if fighter[3] != 0:
                fighter_name = f"üñê{name}{redk}"
            else:
                fighter_name = f"{name}{redk}"

            button = InlineKeyboardButton(text=fighter_name, callback_data=f'prd_{fighter_id}_{fighter[4]}_{reg}_{pag}_{user_id}')
            row.append(button)

            if len(row) == 3:
                change_kb.row(*row)
                row = []

        if row:
            change_kb.row(*row)

        total_pages = (len(fighters) + 11) // 12
        if len(fighters) > 12:
            change_kb.row(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'prdprev_{total_pages if pag == 1 else pag-1}_{user_id}'),
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{pag}_{user_id}'),
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'prdnext_{"1" if pag >= total_pages else pag+1}_{user_id}')
            )
        else:
            change_kb.row(InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{pag}_{user_id}'))

        await call.message.edit_text('<b>–¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ‚ùï</b>', reply_markup=change_kb, parse_mode='html')
        
@dp.callback_query_handler(lambda query: query.data.startswith('choose_'))
async def handle_choose_fighter(query):
    user_id = query.from_user.id
    fighter_id = int(query.data.split('_')[1])
    if user_id in players:
        await query.answer('–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ùï')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    vo = c.fetchone()
    hp1 = vo[7]
    attack1 = vo[8]
    armor1 = vo[9]
    crit1 = vo[10]
    uklon1 = vo[11]
    vampir1 = vo[12]
    mmr = vo[9]
    #
    c.execute('UPDATE pers SET hp=?, uron=?, armor=?, crit=?, uklon=?, vampir=? WHERE status="1" AND user_id=?',(hp1, attack1, armor1, crit1, uklon1, vampir1, user_id,))
    c.execute('UPDATE pers SET status="0" WHERE status="1" AND user_id=?',(user_id,))
    c.execute('UPDATE pers SET status=? WHERE user_id=? AND type=?', (1, user_id, fighter_id))
    c.execute('UPDATE users SET voins=? WHERE user_id=?', (fighter_id, user_id))
    base.commit()
    c.execute('SELECT * FROM pers WHERE status="1" AND user_id=?',(user_id,))
    pers = c.fetchone()
    #
    hp2 = pers[3]
    uron2 = pers[4]
    armor2 = pers[5]
    crit2 = pers[6]
    uklon2 = pers[7]
    vampir2 = pers[8]
    c.execute(f'UPDATE users SET voin1={hp2}, voin2={uron2}, voin3={armor2}, voin4={crit2}, voin5={uklon2}, voin6={vampir2} WHERE user_id={user_id}')
    base.commit()

    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    user = c.fetchone()
    hp = user[7]
    phot = user[2]
    attack = user[8]
    shit = user[9]
    krit = user[10]
    uklon = user[11]
    vampirism = user[12]
    op = user[4]
    chosen_voin = ""
    if user[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif user[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif user[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif user[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif user[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif user[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif user[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif user[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif user[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif user[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif user[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif user[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif user[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif user[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif user[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif user[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif user[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif user[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif user[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif user[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"

    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    await bot.send_photo(chat_id=query.message.chat.id, photo=open(f'/bot/module-deda/bot{phot}.png', 'rb'),
                              caption=f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hp}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)

########
@dp.message_handler(text=['–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ üéñ'])
async def show_top(msg):
    if msg.chat.type == "supergroup":
        return
    user_id = msg.from_user.id
    c.execute("SELECT * FROM users ORDER BY mmr DESC") 
    users = c.fetchall()
    place = get_user_place(user_id, users)
    total_pages = math.ceil(min(len(users), 30) / 5) 

    if place > 30:
        current_page = 1
    else:
        current_page = (place - 1) // 5 + 1

    await construct_message(user_id, users, total_pages, current_page)

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith(('prev|', 'next|')))
async def process_callback_pagination(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    query = callback_query.data.split('|')

    c.execute("SELECT * FROM users ORDER BY mmr DESC")
    users = c.fetchall()

    total_pages = int(query[2])
    current_page = int(query[1])

    if query[0] == 'prev' and current_page > 1:
        current_page -= 1
    elif query[0] == 'next' and current_page < total_pages:
        current_page += 1
    else:
        await callback_query.answer('–¢–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚ùå')

    await construct_message(user_id, users, total_pages, current_page, callback_query.message.message_id)

async def construct_message(user_id, users, total_pages, current_page, message_id=None):
    show_users = users[(current_page - 1) * 5: current_page * 5]

    keyboard = InlineKeyboardMarkup()
    prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev|{current_page}|{total_pages}")
    page_button = InlineKeyboardButton(f"{current_page} | {total_pages}", callback_data="ignore")
    next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next|{current_page}|{total_pages}")
    keyboard.row(prev_button, page_button, next_button)

    text = ""
    for i, user in enumerate(show_users):
        global_rank = (current_page - 1) * 5 + i + 1
        rank = get_user_emoji_rank(global_rank) 
        name = user[13]
        mmr = user[5]
        link = f'<a href="tg://user?id={user[0]}">{name}</a>'
        text += f"{rank} - {link}\n{mmr} MMR\n\n"

    user_place = get_user_place(user_id, users)
    text += f"üèÜ –í—ã –Ω–∞ {user_place} –º–µ—Å—Ç–µ"

    if message_id is None:
        await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/top.png', 'rb'),
                              caption=text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await bot.edit_message_caption(
            chat_id=user_id,
            message_id=message_id,
            caption=text,
            reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'ignore')
async def process_callback_swipe(callback_query: types.CallbackQuery):
    await callback_query.answer()

def get_user_place(user_id, users):
    for i, user in enumerate(users):
        if user[0] == user_id:
            return i+1
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" 

def get_user_emoji_rank(global_rank):
    emoji_map = {
        0: '0Ô∏è‚É£', 1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£',
        5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£', 8: '8Ô∏è‚É£', 9: '9Ô∏è‚É£', 10: 'üîü'
    }

    if global_rank <= 10:
        return emoji_map[global_rank]
    else:
        return emoji_map[global_rank // 10] + emoji_map[global_rank % 10]

@dp.message_handler(commands=['setexp'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setexp ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üß©')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[4]
        c.execute(f'UPDATE users SET exp={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüß© +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[4]
        c.execute(f'UPDATE users SET exp={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüß© -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å') 
        
@dp.message_handler(commands=['sethp'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /sethp ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ ‚ù§')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[7]
        c.execute(f'UPDATE users SET voin1={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n‚ù§ +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[7]
        c.execute(f'UPDATE users SET voin1={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n‚ù§ -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')   
        
@dp.message_handler(commands=['setattack'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setattack ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üî´')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[8]
        c.execute(f'UPDATE users SET voin2={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüî´ +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[8]
        c.execute(f'UPDATE users SET voin2={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüî´ -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')
        
@dp.message_handler(commands=['setarmor'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setarmor ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üõ°')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[9]
        c.execute(f'UPDATE users SET voin3={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüõ° +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[9]
        c.execute(f'UPDATE users SET voin3={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüõ° -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')   
       
@dp.message_handler(commands=['setc'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setc ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üí•')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[10]
        c.execute(f'UPDATE users SET voin4={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüí• +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[10]
        c.execute(f'UPDATE users SET voin4={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüí• -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')   
        
@dp.message_handler(commands=['setevade'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setevade ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ ü¶ã')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[11]
        c.execute(f'UPDATE users SET voin5={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nü¶ã +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[11]
        c.execute(f'UPDATE users SET voin5={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nü¶ã-{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')
        
@dp.message_handler(commands=['setv'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setv ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ ü¶á')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[12]
        c.execute(f'UPDATE users SET voin6={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nü¶á +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[12]
        c.execute(f'UPDATE users SET voin6={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nü¶á -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')    

@dp.message_handler(commands=['setmoney'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setmoney ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üí∞')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[1]
        c.execute(f'UPDATE users SET money={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüí∞ +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[1]
        c.execute(f'UPDATE users SET money={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüí∞ -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')

@dp.message_handler(commands=['setskam'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setskam ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üèÜ')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[6]
        c.execute(f'UPDATE users SET skam={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüë®‚Äçüíª +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[6]
        c.execute(f'UPDATE users SET skam={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüë®‚Äçüíª -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å') 
        
@dp.message_handler(commands=['setplay'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setplay ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üïπ')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[3]
        c.execute(f'UPDATE users SET play={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüïπ +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[3]
        c.execute(f'UPDATE users SET play={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüïπ -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å') 

@dp.message_handler(commands=['setmmr'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setmmr ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üèÜ')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[5]
        c.execute(f'UPDATE users SET mmr={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüèÜ +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[5]
        c.execute(f'UPDATE users SET mmr={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüèÜ -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å') 
        
@dp.message_handler(commands=['setcoin'])
async def set(msg: types.Message):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    split = msg.text.split()
    if len(split) < 4:
        await msg.answer('‚ùï –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ | /setcoin ¬´id¬ª ¬´+/-¬ª ¬´amount¬ª')
        return
    arg = int(split[1])
    arg2 = split[2]
    arg3 = int(split[3])
    if not arg:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ ID')
        return
    if not arg2 or arg2 not in ["+", "-", "–º–∏–Ω—É—Å", "–ø–ª—é—Å"]:
        await msg.answer('‚ùï –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ + | -')
        return
    if not arg3:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ üíé')
        return
    c.execute(f'SELECT * FROM users WHERE user_id={arg}')
    user = c.fetchone()
    if not user:
        await msg.answer('‚ùï –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if arg3 <= 0:
        await msg.answer('‚ùï –û—à–∏–±–∫–∞ –≤ —á–∏—Å–ª–µ')
        return
    if arg2 == "+" or arg2 == "–ø–ª—é—Å":
        money = user[15]
        c.execute(f'UPDATE users SET coin={money + arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüíé +{arg3}</b>', parse_mode='html')
    elif arg2 == "-" or arg2 == "–º–∏–Ω—É—Å":
        money = user[15]
        c.execute(f'UPDATE users SET coin={money - arg3} WHERE user_id={arg}')
        base.commit()
        await msg.answer(f'<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.\n\nüíé -{arg3}</b>', parse_mode='html')
    else:
        await msg.answer('‚ùï –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ —É–¥–∞–ª–æ—Å—å')
    
@dp.message_handler(commands=['och'])
async def send_queue(message: types.Message):
   user = message.from_user.id
   c.execute(f'SELECT * FROM admin WHERE user_id={user}')
   id = c.fetchone()
   if not id:
       return
   if not player_queue:
       await message.reply('‚ùóÔ∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞')
   else:
       text = "üïπ –û—á–µ—Ä–µ–¥—å –Ω–∞ –∏–≥—Ä—É\n\n"

       for idx, user_id in enumerate(player_queue, start=1):
           text += '{}. <a href="tg://user?id={}">–ò–≥—Ä–æ–∫</a>\n'.format(idx, user_id)

           if len(text) > 4000:
               await message.reply(text, parse_mode='HTML')
               text = ""

       if text.strip():
           await message.reply(text, parse_mode='HTML')

@dp.callback_query_handler(text='nexstpers')
async def pers(call):
    user_id = call.from_user.id
    if user_id in players:
        await call.answer('–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –Ω–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ùï')
        return
    c.execute('SELECT COUNT(*) FROM pers WHERE user_id=?', (user_id,))
    num_fighters = c.fetchone()[0]

    c.execute('SELECT * FROM pers WHERE user_id=?', (user_id,))
    fighters = c.fetchall()

    change_kb = InlineKeyboardMarkup(row_width=2)

    for fighter in fighters:
        fighter_id = fighter[1]

        if fighter_id == 1:
            fighter_name = '–ß–º–æ–Ω—è –ì–∞—Ç—Å'
        elif fighter_id == 2:
            fighter_name = '–ü—É–¥–∂'
        elif fighter_id == 3:
            fighter_name = '–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤'
        elif fighter_id == 4:
            fighter_name = '–ì–∏–≥–∞—á–∞–¥'
        elif fighter_id == 5:
            fighter_name = '–¢–∞–Ω–æ—Å'
        elif fighter_id == 6:
            fighter_name = '–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫'
        elif fighter_id == 7:
            fighter_name = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif fighter_id == 8:
            fighter_name = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif fighter_id == 9:
            fighter_name = "–ü–µ–ø–µ –ú–∞–≥"
        elif fighter_id == 10:
            fighter_name = "–¢–µ–Ω—å"
        elif fighter_id == 11:
            fighter_name = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif fighter_id == 12:
            fighter_name = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif fighter_id == 13:
            fighter_name = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
        elif fighter_id == 14:
            fighter_name = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
        elif fighter_id == 15:
            fighter_name = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
        elif fighter_id == 16:
            fighter_name = "–ü–∞–π–º–æ–Ω"
        elif fighter_id == 17:
            fighter_name = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
        elif fighter_id == 18:
            fighter_name = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
        elif fighter_id == 19:
            fighter_name = "–ê—Å—Ç–∞"
        elif fighter_id == 20:
            fighter_name = "–®—Ä–µ–∫"


        if fighter[2] == 1:
            fighter_name += ' ‚úîÔ∏è'
                
        change_kb.add(InlineKeyboardButton(text=fighter_name, callback_data=f'choose_{fighter_id}'))

    await call.message.edit_caption('<b>–í–∞—à–∏ –≤–æ–∏–Ω—ã ‚ùï</b>', reply_markup=change_kb, parse_mode='html')


@dp.message_handler(commands=['edit'], commands_prefix='!./+')
async def setbd(msg):
    user = msg.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    try:
        split = msg.text.split()
        id = int(split[1])
        c.execute('SELECT * FROM users WHERE user_id=?',(id,))
        user = c.fetchone()
        
        #
        kb = InlineKeyboardMarkup()
        p1 = InlineKeyboardButton(text='–í–æ–∏–Ω—ã ü•∑', callback_data=f'getvoin_{id}')
        p2 = InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å ü•∑', callback_data=f'givevoin_{id}')
        p3 = InlineKeyboardButton(text='–ó–∞–±—Ä–∞—Ç—å ü•∑', callback_data=f'takevoin_{id}')
        kb.add(p1, p2, p3)
        #
        c.execute("SELECT * FROM users ORDER BY mmr DESC LIMIT 30")
        users = c.fetchall()
        money = user[1]
        c.execute(f'SELECT COUNT(*) FROM pers WHERE user_id={id}')
        voins = c.fetchone()[0]
        name = user[13]
        play = user[3]
        exp = user[4]
        mmr = user[5]
        skam = user[6]
        lose = user[14]
        coin = user[15]
        wins = play - lose
        
        if play != 0:
            win = (wins / play) * 100
        else:
            win = 0
        
        stats = (
            f'–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {name}\n\n'
            f'üî∞ {get_user_place(id, users)} —Ä–∞–Ω–≥\n'
            f'üèÜ {mmr} MMR\n\n'
            f'üî∑ –°—ã–≥—Ä–∞–Ω–æ –±–æ–µ–≤: {play}\n'
            f'üî∂ –î–æ–ª—è –ø–æ–±–µ–¥: {win:.1f}%\n\n'
            f'ü•∑ –í–æ–∏–Ω—ã {voins} / 15\n'
            f'üí∞ –ó–æ–ª–æ—Ç–æ {money}\n'
            f'üíé –ö–æ–∏–Ω—ã: {coin} —à—Ç.\n'
            f'üß© –û–ø—ã—Ç {exp}\n\n'
            f'üßë‚Äçüíª –ó–∞—Å–∫–∞–º–ª–µ–Ω–æ –ª—é–¥–µ–π {skam}'
            )
             
        await msg.answer(stats, parse_mode='html', reply_markup=kb)
    except:
        await msg.answer('‚ùï –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω') 

@dp.callback_query_handler(lambda c: c.data.startswith('takevoin_'))
async def dip(call):
    user = call.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    user_id = int(call.data.split('_')[1])
    c.execute('SELECT COUNT(*) FROM pers WHERE user_id=?', (user_id,))
    num_fighters = c.fetchone()[0]

    c.execute('SELECT * FROM pers WHERE user_id=?', (user_id,))
    fighters = c.fetchall()

    change_kb = InlineKeyboardMarkup(row_width=2)

    for fighter in fighters:
        fighter_id = fighter[1]

        if fighter_id == 1:
            fighter_name = '–ß–º–æ–Ω—è –ì–∞—Ç—Å'
        elif fighter_id == 2:
            fighter_name = '–ü—É–¥–∂'
        elif fighter_id == 3:
            fighter_name = '–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤'
        elif fighter_id == 4:
            fighter_name = '–ì–∏–≥–∞—á–∞–¥'
        elif fighter_id == 5:
            fighter_name = '–¢–∞–Ω–æ—Å'
        elif fighter_id == 6:
            fighter_name = '–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫'
        elif fighter_id == 7:
            fighter_name = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif fighter_id == 8:
            fighter_name = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif fighter_id == 9:
            fighter_name = "–ü–µ–ø–µ –ú–∞–≥"
        elif fighter_id == 10:
            fighter_name = "–¢–µ–Ω—å"
        elif fighter_id == 11:
            fighter_name = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif fighter_id == 12:
            fighter_name = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif fighter_id == 13:
            fighter_name = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"


        if fighter[2] == 1:
            fighter_name += ' ‚úîÔ∏è'
                
        change_kb.add(InlineKeyboardButton(text=fighter_name, callback_data=f'take_{fighter_id}_{user_id}'))

    await call.message.edit_text('<b>–ö–∞–∫–æ–≥–æ –≤–æ–∏–Ω–∞ –∑–∞–±—Ä–∞—Ç—å ‚ùï</b>', reply_markup=change_kb, parse_mode='html')
        
@dp.callback_query_handler(lambda c: c.data.startswith('getvoin_'))
async def dip(call):
    user = call.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    user_id = int(call.data.split('_')[1])
    c.execute('SELECT COUNT(*) FROM pers WHERE user_id=?', (user_id,))
    num_fighters = c.fetchone()[0]

    c.execute('SELECT * FROM pers WHERE user_id=?', (user_id,))
    fighters = c.fetchall()

    change_kb = InlineKeyboardMarkup(row_width=2)

    for fighter in fighters:
        fighter_id = fighter[1]

        if fighter_id == 1:
            fighter_name = '–ß–º–æ–Ω—è –ì–∞—Ç—Å'
        elif fighter_id == 2:
            fighter_name = '–ü—É–¥–∂'
        elif fighter_id == 3:
            fighter_name = '–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤'
        elif fighter_id == 4:
            fighter_name = '–ì–∏–≥–∞—á–∞–¥'
        elif fighter_id == 5:
            fighter_name = '–¢–∞–Ω–æ—Å'
        elif fighter_id == 6:
            fighter_name = '–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫'
        elif fighter_id == 7:
            fighter_name = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif fighter_id == 8:
            fighter_name = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif fighter_id == 9:
            fighter_name = "–ü–µ–ø–µ –ú–∞–≥"
        elif fighter_id == 10:
            fighter_name = "–¢–µ–Ω—å"
        elif fighter_id == 11:
            fighter_name = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif fighter_id == 12:
            fighter_name = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif fighter_id == 13:
            fighter_name = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"


        if fighter[2] == 1:
            fighter_name += ' ‚úîÔ∏è'
                
        change_kb.add(InlineKeyboardButton(text=fighter_name, callback_data=f'kenplr_{fighter_id}'))

    await call.message.edit_text('<b>–í–æ–∏–Ω—ã –∏–≥—Ä–æ–∫–∞ ‚ùï</b>', reply_markup=change_kb, parse_mode='html')

@dp.callback_query_handler(lambda c: c.data.startswith('take_'))
async def dip(call):
    try:
        user_id = int(call.data.split('_')[2])
        type = int(call.data.split('_')[1])
        user = call.from_user.id
        c.execute(f'SELECT * FROM admin WHERE user_id={user}')
        id = c.fetchone()
        if not id:
            return
        c.execute(f'DELETE FROM pers WHERE user_id={user_id} AND type={type}')
        base.commit()
        await call.answer('–£—Å–ø–µ—à–Ω–æ ‚ùï', show_alert=True)
    except:
        await call.answer('–£ –¥–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —É–∂–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–∏–Ω–∞ ‚ùï', show_alert=True)
        
@dp.callback_query_handler(lambda c: c.data.startswith('givevoin_'))
async def dip(call):
    user = call.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    user_id = int(call.data.split('_')[1])
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    #
    c.execute(f'SELECT * FROM pers WHERE user_id={user_id}')
    pers = c.fetchone()
    #
    givevoin = InlineKeyboardMarkup()
    p1 = InlineKeyboardButton(text='–ß–º–æ–Ω—è –≥–∞—Ç—Å', callback_data=f'give:1:{user_id}')
    p2 = InlineKeyboardButton(text='–ü—É–¥–∂', callback_data=f'give:2:{user_id}')
    p3 = InlineKeyboardButton(text='–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤', callback_data=f'give:3:{user_id}')
    p4 = InlineKeyboardButton(text='–ì–∏–≥–∞—á–∞–¥', callback_data=f'give:4:{user_id}')
    p5 = InlineKeyboardButton(text='–¢–∞–Ω–æ—Å', callback_data=f'give:5:{user_id}')
    p6 = InlineKeyboardButton(text='–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫', callback_data=f'give:6:{user_id}')
    p7 = InlineKeyboardButton(text='–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç', callback_data=f'give:7:{user_id}')
    p8 = InlineKeyboardButton(text='–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥', callback_data=f'give:8:{user_id}')
    p9 = InlineKeyboardButton(text='–ü–µ–ø–µ –ú–∞–≥', callback_data=f'give:9:{user_id}')
    p10 = InlineKeyboardButton(text='–¢–µ–Ω—å', callback_data=f'give:10:{user_id}')
    p11 = InlineKeyboardButton(text='–®–∞–¥–æ—É –§—Ä–µ–Ω–¥', callback_data=f'give:11:{user_id}')
    p12 = InlineKeyboardButton(text='–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω', callback_data=f'give:12:{user_id}')
    p13 = InlineKeyboardButton(text='–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫', callback_data=f'give:13:{user_id}')
    givevoin.add(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
    await call.message.answer('ü•∑ –ö–∞–∫–æ–≥–æ –≤–æ–∏–Ω–∞ –≤—ã–¥–∞—Ç—å:', reply_markup=givevoin)

@dp.callback_query_handler(lambda c: c.data.startswith('kenplr_'))
async def dip(call):
    user = call.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    await call.answer('‚ùï –≠—Ç–æ –≤–æ–∏–Ω—ã –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≤ –ø–∞–Ω–µ–ª–∏', show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith('give:'))
async def dip(call):
    user_id = int(call.data.split(':')[2])
    type = int(call.data.split(':')[1])
    user = call.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    if type == 1:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="1"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 1, 1, 550, 55, 1, 5, 1, 1, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 2:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="2"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 2, 0, 600, 90, 5, 10, 15, 5, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 3:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="3"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 3, 0, 1250, 120, 10, 10, 10, 10, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 4:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="4"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 4, 0, 1500, 500, 15, 20, 20, 15, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 5:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="5"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 5, 0, 6000, 2250, 80, 90, 45, 80, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 6:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="6"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 6, 0, 2500, 1250, 40, 60, 40, 80, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 7:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="7"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 7, 0, 1250, 500, 25, 50, 30, 60, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 8:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="8"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 8, 0, 3200, 550, 8, 40, 55, 20, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 9:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="9"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 9, 0, 2000, 280, 10, 60, 35, 40, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 10:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="10"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 10, 0, 4500, 1200, 65, 75, 40, 85, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 11:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="11"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 11, 0, 2500, 350, 13, 65, 35, 40, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 12:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="12"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 12, 0, 6200, 2250, 80, 80, 65, 90, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)
    elif type == 13:
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type="13"')
        voin = c.fetchone()
        if not voin:
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 13, 0, 5200, 1350, 80, 70, 70, 80, 0))
            base.commit()
            await call.answer('–ì–æ—Ç–æ–≤–æ ‚ùï', show_alert=True)
            return
        await call.answer('‚ùï –î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω –ø—Ä–∏—Å—É—Ç—Å–≤—É–µ—Ç', show_alert=True)

@dp.message_handler(commands=['boy'])
async def chec_battles(message: types.Message):
    user = message.from_user.id
    c.execute(f'SELECT * FROM admin WHERE user_id={user}')
    id = c.fetchone()
    if not id:
        return
    if not players:
        await message.reply('‚ùóÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤')
    else:
        text = ""
        battle_number = 1

        for player_id, player_stats in players.items():
            c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
            player_info = c.fetchone()
            user = c.fetchone()
            player_name = player_info[13]
            chosen_voin = ""
            if player_info[2] == 1:
                chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
            elif player_info[2] == 2:
                chosen_voin = "–ü—É–¥–∂"
            elif player_info[2] == 3:
                chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
            elif player_info[2] == 4:
                chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
            elif player_info[2] == 5:
                chosen_voin = "–¢–∞–Ω–æ—Å"
            elif player_info[2] == 6:
                chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
            elif player_info[2] == 7:
                chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
            elif player_info[2] == 8:
                chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
            elif player_info[2] == 9:
                chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
            elif player_info[2] == 10:
                chosen_voin = "–¢–µ–Ω—å"
            elif player_info[2] == 11:
                chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
            elif player_info[2] == 12:
                chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
            elif player_info[2] == 13:
                chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
            elif player_info[2] == 14:
                chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
            elif player_info[2] == 15:
                chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
            elif player_info[2] == 16:
                chosen_voin = "–ü–∞–π–º–æ–Ω"
            elif player_info[2] == 17:
                chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
            elif player_info[2] == 18:
                chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
            elif player_info[2] == 19:
                chosen_voin = "–ê—Å—Ç–∞"
            elif player_info[2] == 20:
                chosen_voin = "–®—Ä–µ–∫"
           
            text += f"„Ä∞Ô∏è\n{battle_number}Ô∏è‚É£ –ë–æ–π\n\n"
            text += f"üë§ <a href='tg://user?id={player_id}'>{player_name}</a>\n"
            text += f"üé≠ {chosen_voin} ‚ù§Ô∏è  {player_stats['health']}\n"
            text += f"üî´ {player_stats['attack']} "
            text += f"üõ° {player_stats['armor']} "
            text += f"üí• {player_stats['crit_chance']}% "
            text += f"ü¶ã {player_stats['evade_chance']}% "
            text += f"ü¶á {player_stats['vampirism_chance']}%\n\n"

            if len(text) > 4000:
                await message.reply(text, parse_mode='HTML')
                text = ""
                
            battle_number += 1

        if text.strip():
           await message.reply(text, parse_mode='HTML')

@dp.message_handler(text=['–ò–≥—Ä–∞—Ç—å üïπ'])
async def duel_command_handler(message: types.Message):
    if message.chat.type == "supergroup":
        return
    user_id = message.from_user.id
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    play = c.fetchone()
    if not play:
        await message.answer('‚ùó –í–≤–µ–¥–∏—Ç–µ  /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return
    if play[23] != 0:
        c.execute(f'UPDATE users SET attacks={"0"} WHERE user_id={user_id}')
        base.commit()
        
    if int(user_id) in player_queue:
        await message.reply("‚ùó <b>–í—ã —É–∂–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</b>", reply_markup=get_cancel_keyboard(user_id), parse_mode='html')
        return

    if int(user_id) in players:
        await message.reply("<b>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—é ‚ùï</b>", parse_mode='html')
        return
    player_queue.append(user_id)
    await message.answer_sticker(sticker='CAACAgEAAxkBAAEXUmNlKo4N6ASs2cJlzOZmkVpsGrLxOQACxQIAAkeAGUTTk7G7rIZ7GjAE')
    await message.answer('‚ôªÔ∏è <b>–ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...</b>', reply_markup=get_cancel_keyboard(user_id), parse_mode='html')

    if len(player_queue) >= 2:
        await start_duel()

async def afkst(msg1, msg2, user1, user2):
    c.execute(f'SELECT * FROM users WHERE user_id={user1}')
    us = c.fetchone()
    attack = us[23]
    count = 0
    seconds = 20
    destv = 0

    while True:
        c.execute(f'SELECT * FROM users WHERE user_id={user1}')
        new = c.fetchone()

        
        if user1 not in players:
            break

        if new[23] != attack:
            break

        if count >= seconds:
            if user1 in players:
                if destv == 0:
                    await bot.send_message(user1, '<b>‚ùï –ê—Ç–∞–∫—É–π—Ç–µ</b>')
                    seconds += 10
                    destv = 1
                else:
                    await win_players(msg1, msg2, user1, user2)
                    destv = 0
                    break
            else:
                break

        await asyncio.sleep(1)
        count += 1
        

def get_cancel_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ ‚ùå", callback_data=f"cancel:{user_id}"))
    return keyboard

async def start_duel():
    player1_id = player_queue.pop(0)
    player2_id = player_queue.pop(0)
    global opponent_id
    global player_id
    player_id = player1_id
    opponent_id = player2_id
    c.execute(f'SELECT * FROM users WHERE user_id={player1_id}')
    p1 = c.fetchone()
    
    c.execute(f'SELECT * FROM users WHERE user_id={player2_id}')
    p2 = c.fetchone()
    
    # player 1
    hp = p1[7]
    attack = p1[8]
    armor = p1[9]
    crit = p1[10]
    uklon = p1[11]
    vamp = p1[12]
    phot2 = p1[2]
    # player 2
    hp2 = p2[7]
    attack2 = p2[8]
    armor2 = p2[9]
    crit2 = p2[10]
    uklon2 = p2[11]
    vamp2 = p2[12]
    phot1 = p2[2]

    players[player1_id] = {
        'health': hp,
        'attack': attack,
        'armor': armor,
        'crit_chance': crit,
        'evade_chance': uklon,
        'vampirism_chance': vamp,
        'turn': True,  # player1 starts
        'message_id': None
    }

    players[player2_id] = {
        'health': hp2,
        'attack': attack2,
        'armor': armor2,
        'crit_chance': crit2,
        'evade_chance': uklon2,
        'vampirism_chance': vamp2,
        'turn': False,  # player2 waits
        'message_id': None
    }
    chosen_voin = ""
    if p1[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p1[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif p1[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p1[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif p1[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif p1[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p1[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p1[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p1[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif p1[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif p1[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p1[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p1[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p1[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p1[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p1[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif p1[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p1[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p1[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif p1[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"
    
    chosen_voin2 = ""
    if p2[2] == 1:
        chosen_voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p2[2] == 2:
        chosen_voin2 = "–ü—É–¥–∂"
    elif p2[2] == 3:
        chosen_voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p2[2] == 4:
        chosen_voin2 = "–ì–∏–≥–∞—á–∞–¥"
    elif p2[2] == 5:
        chosen_voin2 = "–¢–∞–Ω–æ—Å"
    elif p2[2] == 6:
        chosen_voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"  
    if p2[2] == 7:
        chosen_voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p2[2] == 2:
        chosen_voin2 = "–ü—É–¥–∂"
    elif p2[2] == 3:
        chosen_voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p2[2] == 4:
        chosen_voin2 = "–ì–∏–≥–∞—á–∞–¥"
    elif p2[2] == 5:
        chosen_voin2 = "–¢–∞–Ω–æ—Å"
    elif p2[2] == 6:
        chosen_voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p2[2] == 7:
        chosen_voin2 = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p2[2] == 8:
        chosen_voin2 = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p2[2] == 9:
        chosen_voin2 = "–ü–µ–ø–µ –ú–∞–≥"
    elif p2[2] == 10:
        chosen_voin2 = "–¢–µ–Ω—å"
    elif p2[2] == 11:
        chosen_voin2 = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p2[2] == 12:
        chosen_voin2 = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p2[2] == 13:
        chosen_voin2 = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p2[2] == 14:
        chosen_voin2 = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p2[2] == 15:
        chosen_voin2 = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p2[2] == 16:
        chosen_voin2 = "–ü–∞–π–º–æ–Ω"
    elif p2[2] == 17:
        chosen_voin2 = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p2[2] == 18:
        chosen_voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p2[2] == 19:
        chosen_voin2 = "–ê—Å—Ç–∞"
    elif p2[2] == 20:
        chosen_voin2 = "–®—Ä–µ–∫"

    await bot.send_message(player1_id, "<b>–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='html')

    with open(f'/bot/module-deda/bot{phot1}.png', 'rb') as photo1:
        msg1 = await bot.send_photo(
            chat_id=player1_id,
            photo=photo1,
            caption=f"<b>{get_stats_message(player1_id, player2_id)}</b>", 
            parse_mode='html',
            reply_markup=get_attack_keyboard(player1_id, player2_id)
        )
        players[player1_id]['message_id'] = msg1.message_id
        


    await bot.send_message(player2_id, "<b>–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='html')
    with open(f'/bot/module-deda/bot{phot2}.png', 'rb') as photo2:
        msg2 = await bot.send_photo(
            chat_id=player2_id,
            photo=photo2,
            caption=f"<b>{get_stats_message2(player2_id, player1_id)}</b>", 
            parse_mode='html',
            reply_markup=get_attack_keyboard(player2_id, player1_id)  # –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        )
        players[player2_id]['message_id'] = msg2.message_id
        
    await afkst(msg1, msg2, player1_id, player2_id)

def get_stats_message(player_id, opponent_id):
    player_stats = players[player_id]
    opponent_stats = players[opponent_id]
    c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
    p1 = c.fetchone()
    c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
    p2 = c.fetchone()
    nick = p2[13]
    mmr2 = p2[5]
    mmr1 = p1[5]
    voin = ""
    if p1[2] == 1:
        voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p1[2] == 2:
        voin = "–ü—É–¥–∂"
    elif p1[2] == 3:
        voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p1[2] == 4:
        voin = "–ì–∏–≥–∞—á–∞–¥"
    elif p1[2] == 5:
        voin = "–¢–∞–Ω–æ—Å"
    elif p1[2] == 6:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p1[2] == 7:
        voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p1[2] == 8:
        voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p1[2] == 9:
        voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif p1[2] == 10:
        voin = "–¢–µ–Ω—å"
    elif p1[2] == 11:
        voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p1[2] == 12:
        voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p1[2] == 13:
        voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p1[2] == 14:
        voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p1[2] == 15:
        voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p1[2] == 16:
        voin = "–ü–∞–π–º–æ–Ω"
    elif p1[2] == 17:
        voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p1[2] == 18:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p1[2] == 19:
        voin = "–ê—Å—Ç–∞"
    elif p1[2] == 20:
        voin = "–®—Ä–µ–∫"
    
    voin2 = ""
    if p2[2] == 1:
        voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p2[2] == 2:
        voin2 = "–ü—É–¥–∂"
    elif p2[2] == 3:
        voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p2[2] == 4:
        voin2 = "–ì–∏–≥–∞—á–∞–¥"
    elif p2[2] == 5:
        voin2 = "–¢–∞–Ω–æ—Å"
    elif p2[2] == 6:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p2[2] == 7:
        voin2 = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p2[2] == 8:
        voin2 = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p2[2] == 9:
        voin2 = "–ü–µ–ø–µ –ú–∞–≥"
    elif p2[2] == 10:
        voin2 = "–¢–µ–Ω—å"
    elif p2[2] == 11:
        voin2 = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p2[2] == 12:
        voin2 = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p2[2] == 13:
        voin2 = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p2[2] == 14:
        voin2 = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p2[2] == 15:
        voin2 = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p2[2] == 16:
        voin2 = "–ü–∞–π–º–æ–Ω"
    elif p2[2] == 17:
        voin2 = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p2[2] == 18:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p2[2] == 19:
        voin2 = "–ê—Å—Ç–∞"
    elif p2[2] == 20:
        voin2 = "–®—Ä–µ–∫"
    
    message = f"{nick} | {mmr2} MMR\n" \
              f"üé≠ {voin2} ‚ù§Ô∏è {opponent_stats['health']}\n" \
              f"üî´ {opponent_stats['attack']} " \
              f"üõ° {opponent_stats['armor']} " \
              f"üí• {opponent_stats['crit_chance']}%\n" \
              f"ü¶ã {opponent_stats['evade_chance']}% " \
              f"ü¶á {opponent_stats['vampirism_chance']}%\n\n" \
              f"–í—ã | {mmr1} MMR\n" \
              f"üé≠ {voin} ‚ù§Ô∏è  {player_stats['health']}\n" \
              f"üî´ {player_stats['attack']} " \
              f"<b>üõ° {player_stats['armor']} </b>" \
              f"<b>üí• {player_stats['crit_chance']}%\n</b>" \
              f"<b>ü¶ã {player_stats['evade_chance']}%</b>" \
              f"<b> ü¶á {player_stats['vampirism_chance']}%\n\n‚òÄÔ∏è –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å!</b>"

    return message
    
def get_stats_message2(player_id, opponent_id):
    player_stats = players[player_id]
    opponent_stats = players[opponent_id]
    c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
    p1 = c.fetchone()
    c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
    p2 = c.fetchone()
    nick = p2[13]
    mmr2 = p2[5]
    mmr1 = p1[5]
    voin = ""
    if p1[2] == 1:
        voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p1[2] == 2:
        voin = "–ü—É–¥–∂"
    elif p1[2] == 3:
        voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p1[2] == 4:
        voin = "–ì–∏–≥–∞—á–∞–¥"
    elif p1[2] == 5:
        voin = "–¢–∞–Ω–æ—Å"
    elif p1[2] == 6:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p1[2] == 7:
        voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p1[2] == 8:
        voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p1[2] == 9:
        voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif p1[2] == 10:
        voin = "–¢–µ–Ω—å"
    elif p1[2] == 11:
        voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p1[2] == 12:
        voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p1[2] == 13:
        voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p1[2] == 14:
        voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p1[2] == 15:
        voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p1[2] == 16:
        voin = "–ü–∞–π–º–æ–Ω"
    elif p1[2] == 17:
        voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p1[2] == 18:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p1[2] == 19:
        voin = "–ê—Å—Ç–∞"
    elif p1[2] == 20:
        voin = "–®—Ä–µ–∫"
    
    voin2 = ""
    if p2[2] == 1:
        voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p2[2] == 2:
        voin2 = "–ü—É–¥–∂"
    elif p2[2] == 3:
        voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p2[2] == 4:
        voin2 = "–ì–∏–≥–∞—á–∞–¥"
    elif p2[2] == 5:
        voin2 = "–¢–∞–Ω–æ—Å"
    elif p2[2] == 6:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p2[2] == 7:
        voin2 = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p2[2] == 8:
        voin2 = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p2[2] == 9:
        voin2 = "–ü–µ–ø–µ –ú–∞–≥"
    elif p2[2] == 10:
        voin2 = "–¢–µ–Ω—å"
    elif p2[2] == 11:
        voin2 = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p2[2] == 12:
        voin2 = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p2[2] == 13:
        voin2 = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p1[2] == 14:
        voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p1[2] == 15:
        voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p1[2] == 16:
        voin = "–ü–∞–π–º–æ–Ω"
    elif p1[2] == 17:
        voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p1[2] == 18:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p1[2] == 19:
        voin = "–ê—Å—Ç–∞"
    elif p1[2] == 20:
        voin = "–®—Ä–µ–∫"

    message = f"{nick} | {mmr2} MMR\n" \
              f"üé≠ {voin2} ‚ù§Ô∏è {opponent_stats['health']}\n" \
              f"üî´ {opponent_stats['attack']} " \
              f"üõ° {opponent_stats['armor']} " \
              f"üí• {opponent_stats['crit_chance']}%\n" \
              f"ü¶ã {opponent_stats['evade_chance']}% " \
              f"ü¶á {opponent_stats['vampirism_chance']}%\n\n" \
              f"–í—ã | {mmr1} MMR\n" \
              f"üé≠ {voin} ‚ù§Ô∏è  {player_stats['health']}\n" \
              f"üî´ {player_stats['attack']} " \
              f"<b>üõ° {player_stats['armor']} </b>" \
              f"<b>üí• {player_stats['crit_chance']}%\n</b>" \
              f"<b>ü¶ã {player_stats['evade_chance']}%</b>" \
              f"<b> ü¶á {player_stats['vampirism_chance']}%\n\nüåë {nick} –∞—Ç–∞–∫—É–µ—Ç...</b>"

    return message
    

def get_attack_keyboard(player_id, opponent_id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–£–¥–∞—Ä ü•ä", callback_data=f"attack:{player_id}:{opponent_id}"))
    keyboard.add(types.InlineKeyboardButton("–°–¥–∞—Ç—å—Å—è üéà", callback_data=f"notcanc:{player_id}:{opponent_id}"))
    opponent_id = opponent_id
    return keyboard

@dp.callback_query_handler(lambda c: c.data.startswith('attack:'))
async def handle_attack_callback(call: types.CallbackQuery):
    data = call.data.split()
    player_id = call.from_user.id
    playe = call.from_user.id
    opponent_id = int(call.data.split(':')[2])
    
    
    if playe not in players:
        await call.message.edit_caption(caption='‚ùï –ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞')
        return
    
    if players[playe]['turn'] == False:
        await call.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ ‚ùï")
        return
    
    player_stats = players[player_id]
    opponent_stats = players[opponent_id]
    
    old_player_health = player_stats['health']
    old_opponent_health = opponent_stats['health']
    
    old_player_attack = player_stats['attack']
    old_opponent_attack = opponent_stats['attack']
    
    old_player_armor = player_stats['armor']
    old_opponent_armor = opponent_stats['armor']
    
    old_player_crit_chance = player_stats['crit_chance']
    old_opponent_crit_chance = opponent_stats['crit_chance']
    
    old_player_evade_chance = player_stats['evade_chance']
    old_opponent_evade_chance = opponent_stats['evade_chance']
    
    old_player_vampirism_chance = player_stats['vampirism_chance']
    old_opponent_vampirism_chance = opponent_stats['vampirism_chance']
    
    attack_damage = player_stats['attack']
    c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
    p1 = c.fetchone()
    c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
    p2 = c.fetchone()
    nick = p2[13]
    nick2 = p1[13]
    mmr2 = p2[5]
    mmr1 = p1[5]
    voin = ""
    if p1[2] == 1:
        voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p1[2] == 2:
        voin = "–ü—É–¥–∂"
    elif p1[2] == 3:
        voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p1[2] == 4:
        voin = "–ì–∏–≥–∞—á–∞–¥"
    elif p1[2] == 5:
        voin = "–¢–∞–Ω–æ—Å"
    elif p1[2] == 6:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p1[2] == 7:
        voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p1[2] == 8:
        voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p1[2] == 9:
        voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif p1[2] == 10:
        voin = "–¢–µ–Ω—å"
    elif p1[2] == 11:
        voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p1[2] == 12:
        voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p1[2] == 13:
        voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p1[2] == 14:
        voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p1[2] == 15:
        voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p1[2] == 16:
        voin = "–ü–∞–π–º–æ–Ω"
    elif p1[2] == 17:
        voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p1[2] == 18:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p1[2] == 19:
        voin = "–ê—Å—Ç–∞"
    elif p1[2] == 20:
        voin = "–®—Ä–µ–∫"
    
    voin2 = ""
    if p2[2] == 1:
        voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p2[2] == 2:
        voin2 = "–ü—É–¥–∂"
    elif p2[2] == 3:
        voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p2[2] == 4:
        voin2 = "–ì–∏–≥–∞—á–∞–¥"
    elif p2[2] == 5:
        voin2 = "–¢–∞–Ω–æ—Å"
    elif p2[2] == 6:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p2[2] == 7:
        voin2 = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p2[2] == 8:
        voin2 = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p2[2] == 9:
        voin2 = "–ü–µ–ø–µ –ú–∞–≥"
    elif p2[2] == 10:
        voin2 = "–¢–µ–Ω—å"
    elif p2[2] == 11:
        voin2 = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p2[2] == 12:
        voin2 = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p2[2] == 13:
        voin2 = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p2[2] == 14:
        voin2 = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p2[2] == 15:
        voin2 = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p2[2] == 16:
        voin2 = "–ü–∞–π–º–æ–Ω"
    elif p2[2] == 17:
        voin2 = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p2[2] == 18:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p2[2] == 19:
        voin2 = "–ê—Å—Ç–∞"
    elif p2[2] == 20:
        voin2 = "–®—Ä–µ–∫"
    if random.randint(1, 100) <= player_stats['crit_chance']:
        attack_damage *= random.randint(2, 5)

    if random.randint(1, 100) <= opponent_stats['evade_chance']:
        player_stats['turn'] = False
        opponent_stats['turn'] = True
        c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
        atm = c.fetchone()
        ata = int(atm[23])
        ata += 1
        c.execute(f'UPDATE users SET attacks={ata} WHERE user_id={player_id}')
        base.commit()
        ka = 1
        ju = 2
        
        await bot.edit_message_caption(chat_id=player_id, 
                               message_id=player_stats['message_id'], 
                               caption=f"<b>{nick} | {mmr2} MMR\nüé≠ {voin2} ‚ù§ {old_opponent_health}\nüî´ {old_opponent_attack} üõ° {old_opponent_armor} üí•\n{old_opponent_crit_chance}% ü¶ã {old_opponent_evade_chance}% ü¶á {old_opponent_vampirism_chance}%\n\n–í—ã | {mmr1} MMR\nüé≠ {voin} ‚ù§ {old_player_health}\nüî´ {old_player_attack} üõ° {old_player_armor} üí•\n{old_player_crit_chance}% ü¶ã {old_player_evade_chance}% ü¶á {old_player_vampirism_chance}%\n\n–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å üå∑\n\nüåë {nick} –∞—Ç–∞–∫—É–µ—Ç...\n\n</b>", 
                               reply_markup=get_attack_keyboard(player_id, opponent_id), parse_mode='html')
        await bot.edit_message_caption(chat_id=opponent_id, 
                                    message_id=opponent_stats['message_id'], 
                                    caption=f"<b>{nick2} | {mmr1} MMR\nüé≠ {voin} ‚ù§ {old_player_health}\nüî´ {old_player_attack} üõ° {old_player_armor} üí•\n{old_player_crit_chance}% ü¶ã {old_player_evade_chance}% ü¶á {old_player_vampirism_chance}%\n\n–í—ã | {mmr2} MMR\nüé≠ {voin2} ‚ù§ {old_opponent_health}\nüî´ {old_opponent_attack} üõ° {old_opponent_armor} üí•\n{old_opponent_crit_chance}% ü¶ã {old_opponent_evade_chance}% ü¶á {old_opponent_vampirism_chance}%\n\n–í—Ä–∞–≥ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è üå∑\n\n‚òÄÔ∏è –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å!\n</b>",
                                    reply_markup=get_attack_keyboard(opponent_id, player_id), parse_mode='html')
        await afkst(ka, ju, opponent_id, player_id)
        return
    c.execute(f'SELECT * FROM prd WHERE user_id={player_id} AND use!={"0"} AND type={"3"}')
    prd = c.fetchone()
    if prd:
        redk = prd[2]
        if redk == 1:
            chance = 0.025
            x = 1.5
        elif redk == 2:
            chance = 0.050
            x = 2
        elif redk == 3:
            x = 3
            chance = 0.075
        elif redk == 4:
            x = 3
            chance = 0.1
        elif redk == 5:
            x = 3
            chance = 0.125
        elif redk == 6:
            x = 3
            chance = 0.150
        elif redk == 7:
            x = 4
            chance = 0.3
        elif redk == 8:
            x = 5
            chance = 0.4
        if random.random() <= chance:
            sto = 1
            attack_damage *= x
        else:
            sto = 0
            pass
    else:
        sto = 0
        pass
    attack_damage -= int(attack_damage * (opponent_stats['armor'] / 100))
    if attack_damage <= 0:
        attack_damage = 1

    
    c.execute(f'SELECT * FROM prd WHERE user_id={player_id} AND use!={"0"} AND type={"1"}')
    prd = c.fetchone()
    if prd:
        redk = prd[2]
        if redk == 1:
            chance = 0.0025
        elif redk == 2:
            chance = 0.005
        elif redk == 3:
            chance = 0.0075
        elif redk == 4:
            chance = 0.01
        elif redk == 5:
            chance = 0.015
        elif redk == 6:
            chance = 0.02
        elif redk == 7:
            chance = 0.03
        elif redk == 8:
            chance = 0.05
        if random.random() <= chance:
            toper = 1
            attack_damage = opponent_stats['health']
        else:
            toper = 0
            pass
    else:
        toper = 0
        pass
    
    player_stats['health'] += int(attack_damage * (player_stats['vampirism_chance'] / 100))
    opponent_stats['health'] -= int(attack_damage)


    if opponent_stats['health'] <= 0:
        c.execute(f'SELECT * FROM prd WHERE user_id={opponent_id} AND use!={"0"} AND type={"2"}')
        prd = c.fetchone()
        if prd:
            redk = prd[2]
            if redk == 1:
                chance = 0.25
            elif redk == 2:
                chance = 0.05
            elif redk == 3:
                chance = 0.075
            elif redk == 4:
                chance = 0.1
            elif redk == 5:
                chance = 0.125
            elif redk == 6:
                chance = 0.150
            elif redk == 7:
                chance = 0.2
            elif redk == 8:
                chance = 0.35
            if random.random() <= chance:
                amyl = 1
                c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
                p2 = c.fetchone()
                hp2 = p2[7]
                attack2 = p2[8]
                armor2 = p2[9]
                crit2 = p2[10]
                uklon2 = p2[11]
                vamp2 = p2[12]
                opponent_stats['health'] = hp2
                opponent_stats['attack'] = attack2
                opponent_stats['armor'] = armor2
                opponent_stats['crit_chance'] = crit2
                opponent_stats['evade_chance'] = uklon2
                opponent_stats['vampirism_chance'] = vamp2
                opponent_stats['turn'] = True
                player_stats['turn'] = False
            else:
                amyl = 0
                pass
        else:
            amyl = 0
            pass
        
        if amyl == 1:
            t = 1
            if t == 1:
                if toper == 0:
                    getg = "üî®" if sto == 1 else ""
                    kuv = "–ö—É–≤–∞–ª–¥–æ–π!" if sto == 1 else ""
                elif toper == 1:
                    getg = "ü™ì"
                    kuv = "–¢–æ–ø–æ—Ä–æ–º!"

                c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
                atm = c.fetchone()
                ata = int(atm[23])
                ata += 1
                c.execute(f'UPDATE users SET attacks={ata} WHERE user_id={player_id}')
                base.commit()
                ka = 1
                ju = 2
                
                await bot.edit_message_caption(chat_id=player_id,
                                message_id=player_stats['message_id'],
                                caption=f"<b>{nick} | {mmr2}  MMR\nüé≠ {voin2} ‚ù§ {opponent_stats['health']}\nüî´ {old_opponent_attack} üõ° {old_opponent_armor} üí•\n{old_opponent_crit_chance}% ü¶ã {old_opponent_evade_chance}% ü¶á {old_opponent_vampirism_chance}%\n\n–í—ã | {mmr1} MMR\nüé≠ {voin} ‚ù§ {old_player_health + int(attack_damage * (player_stats['vampirism_chance'] / 100))}\nüî´ {old_player_attack} üõ° {old_player_armor} üí•\n {old_player_crit_chance}% ü¶ã {old_player_evade_chance}% ü¶á {old_player_vampirism_chance}%\n\n{getg} –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {attack_damage} —É—Ä–æ–Ω–∞ ü©∏ {kuv}\nüßø –ê–º—É–ª–µ—Ç —Å–ø–∞—Å –∂–∏–∑–Ω—å –≤—Ä–∞–≥—É!\n\nüåë {nick} –∞—Ç–∞–∫—É–µ—Ç...</b>",
                                parse_mode='html', 
                                reply_markup=get_attack_keyboard(player_id, opponent_id))
                await bot.edit_message_caption(chat_id=opponent_id,
                               message_id=opponent_stats['message_id'],
                               caption=f"<b>{nick2} | {mmr1} MMR\nüé≠ {voin} ‚ù§ {old_player_health + int(attack_damage * (player_stats['vampirism_chance'] / 100))}\nüî´ {old_player_attack} üõ° {old_player_armor} üí•\n{old_player_crit_chance}% ü¶ã {old_player_evade_chance}% ü¶á {old_player_vampirism_chance}%\n\n–í—ã | {mmr2} MMR\nüé≠ {voin2} ‚ù§ {opponent_stats['health']}\nüî´ {old_opponent_attack} üõ° {old_opponent_armor} üí•\n{old_opponent_crit_chance}% ü¶ã {old_opponent_evade_chance}% ü¶á {old_opponent_vampirism_chance}%\n\n{getg} –í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ {attack_damage} —É—Ä–æ–Ω–∞ ü©∏ {kuv}\nüßø –ê–º—É–ª–µ—Ç —Å–ø–∞—Å –≤–∞–º –∂–∏–∑–Ω—å!\n\n‚òÄÔ∏è –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å!</b>",
                               parse_mode='html', 
                               reply_markup=get_attack_keyboard(opponent_id, player_id))
                await afkst(ka, ju, opponent_id, player_id)
            return
        elif amyl == 0:
            pass
        m = players[opponent_id]['message_id']
        players.pop(player_id)
        players.pop(opponent_id)
        c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
        p1 = c.fetchone()
        c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
        p2 = c.fetchone()
        win = random.randint(5000, 25000)
        loser = random.randint(1000, 3600)
        opyt1 = random.randint(50, 400) 
        opyt2 = random.randint(50, 150)
        up1 = opyt1 + p1[4]
        up2 = opyt2 + p2[4]
        play = p1[3]
        play2 = p2[3]
        lo = p2[14]
        pla1 = play + 1
        pla2 = play2 + 1
        lo2 = lo + 1
        phot = p1[2]
        phot2 = p2[2]
        coin = p1[15]
        coinwin = random.randint(1, 5)
        wincoin = coin + coinwin
        wi1 = win + p1[1]
        wi2 = loser + p2[1]
        mmr = max(0, p1[5] + 30)
        mmr3 = max(0, p2[5] - 30)
        c.execute('UPDATE users SET money=?, exp=?, mmr=?, coin=?, play=? WHERE user_id=?',(wi1, up1, mmr, wincoin, pla1, player_id,))
        c.execute('UPDATE users SET money=?, exp=?, mmr=?, lose=?, play=? WHERE user_id=?',(wi2, up2, mmr3, lo2, pla2, opponent_id,))
        base.commit()
        
        
        await bot.delete_message(chat_id=opponent_id, message_id=m)
        await call.message.delete()
        await bot.send_photo(chat_id=player_id, photo=open(f'/bot/module-deda/bot{phot}.png', 'rb'),
                              caption=f"<b>–ü–æ–±–µ–¥–∞ üéÉ\n\nü•∑ –í–æ–∏–Ω {voin}\nüß© –û–ø—ã—Ç +{opyt1}\nüí∞ –ó–æ–ª–æ—Ç–æ +{win}\nüíé –ö–æ–∏–Ω—ã +{coinwin}\n\n+30 MMR</b>", parse_mode='html')
        await bot.send_photo(chat_id=opponent_id, photo=open(f'/bot/module-deda/bot{phot2}.png', 'rb'),
                              caption=f"<b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üíÄ\n\nü•∑ –í–æ–∏–Ω {voin2}\nüß© –û–ø—ã—Ç +{opyt2}\nüí∞ –ó–æ–ª–æ—Ç–æ +{loser}\n\n-30 MMR</b>", parse_mode='html')
        
    else:
        player_stats['turn'] = False
        opponent_stats['turn'] = True
        getg = "üî®" if sto == 1 else ""
        kuv = "–ö—É–≤–∞–ª–¥–æ–π!" if sto == 1 else ""

        # update stats for both players
        ka = 1
        ju = 2
        c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
        atm = c.fetchone()
        ata = int(atm[23])
        ata += 1
        c.execute(f'UPDATE users SET attacks={ata} WHERE user_id={player_id}')
        base.commit()
        await bot.edit_message_caption(chat_id=player_id,
                                message_id=player_stats['message_id'],
                                caption=f"<b>{nick} | {mmr2}  MMR\nüé≠ {voin2} ‚ù§‚Äçü©π {old_opponent_health - attack_damage}\nüî´ {old_opponent_attack} üõ° {old_opponent_armor} üí•\n{old_opponent_crit_chance}% ü¶ã {old_opponent_evade_chance}% ü¶á {old_opponent_vampirism_chance}%\n\n–í—ã | {mmr1} MMR\nüé≠ {voin} ‚ù§ {old_player_health + int(attack_damage * (player_stats['vampirism_chance'] / 100))}\nüî´ {old_player_attack} üõ° {old_player_armor} üí•\n{old_player_crit_chance}% ü¶ã {old_player_evade_chance}% ü¶á {old_player_vampirism_chance}%\n\n{getg} –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {attack_damage} —É—Ä–æ–Ω–∞ ü©∏ {kuv}\n\nüåë {nick} –∞—Ç–∞–∫—É–µ—Ç...</b>",
                                parse_mode='html', 
                                reply_markup=get_attack_keyboard(player_id, opponent_id))
        await bot.edit_message_caption(chat_id=opponent_id,
                               message_id=opponent_stats['message_id'],
                               caption=f"<b>{nick2} | {mmr1} MMR\nüé≠ {voin} ‚ù§ {old_player_health + int(attack_damage * (player_stats['vampirism_chance'] / 100))}\nüî´ {old_player_attack} üõ° {old_player_armor} üí•\n{old_player_crit_chance}% ü¶ã {old_player_evade_chance}% ü¶á {old_player_vampirism_chance}%\n\n–í—ã | {mmr2} MMR\nüé≠ {voin2} ‚ù§‚Äçü©π {old_opponent_health - attack_damage}\nüî´ {old_opponent_attack} üõ° {old_opponent_armor} üí•\n{old_opponent_crit_chance}% ü¶ã {old_opponent_evade_chance}% ü¶á {old_opponent_vampirism_chance}%\n\n{getg} –í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ {attack_damage} —É—Ä–æ–Ω–∞ ü©∏ {kuv}\n\n‚òÄÔ∏è –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å!\n</b>",
                               parse_mode='html', 
                               reply_markup=get_attack_keyboard(opponent_id, player_id))
        await afkst(1, 2, opponent_id, player_id)

@dp.callback_query_handler(lambda c: c.data.startswith('cancel:'))
async def handle_cancel_callback(call: types.CallbackQuery):
    user_id = int(call.data.split(':')[1])

    if user_id in player_queue:
        player_queue.remove(user_id)
        await call.message.edit_text("üïπ <b>–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏</b>", parse_mode='html')
    else:
        await call.message.edit_text("‚ùó –í<b>—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏</b>", parse_mode='html')
        return
    
@dp.callback_query_handler(lambda c: c.data.startswith('notcanc:'))
async def handle_cancel_callback(call: types.CallbackQuery):
    user_id = int(call.data.split(':')[1])
    opponent_id = int(call.data.split(':')[2])
    
    if user_id not in players:
        await call.message.edit_caption(caption='‚ùï –ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞')
    else:
        m = players[opponent_id]['message_id']
        await bot.delete_message(chat_id=opponent_id, message_id=m)
        await call.message.delete()
        await win_player(user_id, opponent_id)

async def win_players(msg1, msg2, opponent_id, player_id):
    if player_id in players or opponent_id in players:
        msg1 = players[opponent_id]['message_id']
        msg2 = players[player_id]['message_id']
        players.pop(player_id)
        players.pop(opponent_id)
        c.execute(f'SELECT * FROM users WHERE user_id={player_id}')
        p1 = c.fetchone()
        c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
        p2 = c.fetchone()
        
        voin = ""
        if p1[2] == 1:
            voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif p1[2] == 2:
            voin = "–ü—É–¥–∂"
        elif p1[2] == 3:
            voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif p1[2] == 4:
            voin = "–ì–∏–≥–∞—á–∞–¥"
        elif p1[2] == 5:
            voin = "–¢–∞–Ω–æ—Å"
        elif p1[2] == 6:
            voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif p1[2] == 7:
            voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif p1[2] == 8:
            voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif p1[2] == 9:
            voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif p1[2] == 10:
            voin = "–¢–µ–Ω—å"
        elif p1[2] == 11:
            voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif p1[2] == 12:
            voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif p1[2] == 13:
            voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
        elif p1[2] == 14:
            voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
        elif p1[2] == 15:
            voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
        elif p1[2] == 16:
            voin = "–ü–∞–π–º–æ–Ω"
        elif p1[2] == 17:
            voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
        elif p1[2] == 18:
            voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
        elif p1[2] == 19:
            voin = "–ê—Å—Ç–∞"
        elif p1[2] == 20:
            voin = "–®—Ä–µ–∫"
    
        voin2 = ""
        if p2[2] == 1:
            voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif p2[2] == 2:
            voin2 = "–ü—É–¥–∂"
        elif p2[2] == 3:
            voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif p2[2] == 4:
            voin2 = "–ì–∏–≥–∞—á–∞–¥"
        elif p2[2] == 5:
            voin2 = "–¢–∞–Ω–æ—Å"
        elif p2[2] == 6:
            voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif p2[2] == 7:
            voin2 = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif p2[2] == 8:
            voin2 = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif p2[2] == 9:
            voin2 = "–ü–µ–ø–µ –ú–∞–≥"
        elif p2[2] == 10:
            voin2 = "–¢–µ–Ω—å"
        elif p2[2] == 11:
            voin2 = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif p2[2] == 12:
            voin2 = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif p2[2] == 13:
            voin2 = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
        elif p2[2] == 14:
            voin2 = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
        elif p2[2] == 15:
            voin2 = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
        elif p2[2] == 16:
            voin2 = "–ü–∞–π–º–æ–Ω"
        elif p2[2] == 17:
            voin2 = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
        elif p2[2] == 18:
            voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
        elif p2[2] == 19:
            voin2 = "–ê—Å—Ç–∞"
        elif p2[2] == 20:
            voin2 = "–®—Ä–µ–∫"
        
        win = random.randint(5000, 25000)
        loser = random.randint(1000, 3600)
        opyt1 = random.randint(50, 400) 
        opyt2 = random.randint(50, 150)
        up1 = opyt1 + p1[4]
        up2 = opyt2 + p2[4]
        play = p1[3]
        play2 = p2[3]
        lo = p2[14]
        pla1 = play + 1
        pla2 = play2 + 1
        lo2 = lo + 1
        phot = p1[2]
        phot2 = p2[2]
        coin = p1[15]
        coinwin = random.randint(1, 5)
        wincoin = coin + coinwin
        wi1 = win + p1[1]
        wi2 = loser + p2[1]
        mmr = max(0, p1[5] + 33)
        mmr3 = max(0, p2[5] - 33)
        c.execute('UPDATE users SET money=?, exp=?, mmr=?, coin=?, play=?, attacks=? WHERE user_id=?',(wi1, up1, mmr, wincoin, pla1, 0, player_id,))
        c.execute('UPDATE users SET mmr=?, lose=?, play=?, attacks=? WHERE user_id=?',(mmr3, lo2, pla2, 0, opponent_id,))
        base.commit()
        
        
        await bot.delete_message(chat_id=opponent_id, message_id=msg1)
        await bot.delete_message(chat_id=player_id, message_id=msg2)
        await bot.send_photo(chat_id=player_id, photo=open(f'/bot/module-deda/bot{phot}.png', 'rb'),
                              caption=f"<b>–í—Ä–∞–≥ —Å–ø–∏—Ç üéÉ\n\nü•∑ –í–æ–∏–Ω {voin}\nüß© –û–ø—ã—Ç +{opyt1}\nüí∞ –ó–æ–ª–æ—Ç–æ +{win}\nüíé –ö–æ–∏–Ω—ã +{coinwin}\n\n+33 MMR</b>", parse_mode='html')
        await bot.send_photo(chat_id=opponent_id, photo=open(f'/bot/module-deda/bot{phot2}.png', 'rb'),
                              caption=f"<b>–ù–µ—Ñ–∏–≥ —Å–ø–∞—Ç—å üíÄ\n\nü•∑ –í–æ–∏–Ω {voin2}\nüß© –û–ø—ã—Ç +0\nüí∞ –ó–æ–ª–æ—Ç–æ +0\n\n-33 MMR</b>", parse_mode='html')
    else:
        return
        
        
async def win_player(user_id, opponent_id):
    players.pop(user_id)
    players.pop(opponent_id)
        
    c.execute(f'SELECT * FROM users WHERE user_id={opponent_id}')
    p1 = c.fetchone()
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    p2 = c.fetchone()    
    win = random.randint(2500, 5000)
    opyt1 = random.randint(50, 150) 
    up1 = opyt1 + p1[4]
    wi1 = win + p1[1]
    play = p1[3]
    play2 = p2[3]
    lo = p2[14]
    pla1 = play + 1
    pla2 = play2 + 1
    lo2 = lo + 1
    phot = p1[2]
    phot2 = p2[2]
    coin = p1[15]
    coinwin = random.randint(1, 2)
    wincoin = coin + coinwin
    voin = ""
    if p1[2] == 1:
        voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p1[2] == 2:
        voin = "–ü—É–¥–∂"
    elif p1[2] == 3:
        voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p1[2] == 4:
        voin = "–ì–∏–≥–∞—á–∞–¥"
    elif p1[2] == 5:
        voin = "–¢–∞–Ω–æ—Å"
    elif p1[2] == 6:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p1[2] == 7:
        voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p1[2] == 8:
        voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p1[2] == 9:
        voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif p1[2] == 10:
        voin = "–¢–µ–Ω—å"
    elif p1[2] == 11:
        voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p1[2] == 12:
        voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p1[2] == 13:
        voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p1[2] == 14:
        voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p1[2] == 15:
        voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p1[2] == 16:
        voin = "–ü–∞–π–º–æ–Ω"
    elif p1[2] == 17:
        voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p1[2] == 18:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p1[2] == 19:
        voin = "–ê—Å—Ç–∞"
    elif p1[2] == 20:
        voin = "–®—Ä–µ–∫"
    
    voin2 = ""
    if p2[2] == 1:
        voin2 = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif p2[2] == 2:
        voin2 = "–ü—É–¥–∂"
    elif p2[2] == 3:
        voin2 = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif p2[2] == 4:
        voin2 = "–ì–∏–≥–∞—á–∞–¥"
    elif p2[2] == 5:
        voin2 = "–¢–∞–Ω–æ—Å"
    elif p2[2] == 6:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif p2[2] == 7:
        voin2 = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif p2[2] == 8:
        voin2 = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif p2[2] == 9:
        voin2 = "–ü–µ–ø–µ –ú–∞–≥"
    elif p2[2] == 10:
        voin2 = "–¢–µ–Ω—å"
    elif p2[2] == 11:
        voin2 = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif p2[2] == 12:
        voin2 = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif p2[2] == 13:
        voin2 = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif p2[2] == 14:
        voin2 = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif p2[2] == 15:
        voin2 = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif p2[2] == 16:
        voin2 = "–ü–∞–π–º–æ–Ω"
    elif p2[2] == 17:
        voin2 = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif p2[2] == 18:
        voin2 = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif p2[2] == 19:
        voin2 = "–ê—Å—Ç–∞"
    elif p2[2] == 20:
        voin2 = "–®—Ä–µ–∫"
    
        
    if p2[5] > 30:
        mmr = max(0, p1[5] + 30)
        mmr3 = max(0, p2[5] - 30)
    else:
        mmr = max(0, p1[5])
        mmr3 = max(0, p2[5])
            
    c.execute('UPDATE users SET money=?, exp=?, mmr=?, coin=?, play=? WHERE user_id=?',(wi1, up1, mmr, wincoin, pla1, opponent_id,))
    c.execute('UPDATE users SET mmr=?, play=?, lose=? WHERE user_id=?',(mmr3, pla2, lo2, user_id,))
    base.commit()
        
    await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{phot2}.png', 'rb'),
                              caption=f"<b>–í—ã —Å–¥–∞–ª–∏—Å—å üíÄ\n\nü•∑ –í–æ–∏–Ω {voin2}\nüß© –û–ø—ã—Ç +0\nüí∞ –ó–æ–ª–æ—Ç–æ +0\n\n-{30 if p2[5] >= 30 else 0} MMR</b>", parse_mode='html')
    await bot.send_photo(chat_id=opponent_id, photo=open(f'/bot/module-deda/bot{phot}.png', 'rb'),
                              caption=f"<b>–í—Ä–∞–≥ —Å–¥–∞–ª—Å—è üéÉ\n\nü•∑ –í–æ–∏–Ω {voin}\nüß© –û–ø—ã—Ç +{opyt1}\nüí∞ –ó–æ–ª–æ—Ç–æ +{win}\nüíé –ö–æ–∏–Ω—ã +{coinwin}\n\n+{30 if p2[5] > 30 else 0} MMR</b>", parse_mode='html')
       
        
@dp.message_handler(commands=['start', 'play'])
async def start(msg):
    if msg.chat.type == "supergroup":
        return
    user_id = msg.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    user = c.fetchone()
    if user:
        await msg.answer('–ñ–º–∏ <b>–ò–≥—Ä–∞—Ç—å</b> üïπ', parse_mode='html', reply_markup=menu)
        return
    
    if not user:
        ref = msg.get_args()
        if ref:
            low = InlineKeyboardMarkup()
            yes = InlineKeyboardButton(text='‚úîÔ∏è –ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirm:{ref}')
            low.add(yes)
            c.execute(f'SELECT * FROM users WHERE user_id={ref}')
            minka = c.fetchone()
            if not minka:
                await msg.answer('‚ùï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º /start - –∏–ª–∏ –Ω–∞–∂–º–º—Ç–µ —Å—é–¥–∞.')
                return
            await msg.answer("<b>–ü–æ–¥–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç! ü§ñ</b>", reply_markup=low)
        else:
            money = 5000
            voins = 1 
            play = 0
            exp = 500
            mmr = 0
            skam = 0
            voin1 = 550
            voin2 = 55
            voin3 = 1
            voin4 = 5
            voin5 = 1
            voin6 = 1
            nick = msg.from_user.first_name
            lose = 0
            coin = 0
            
            c.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, money, voins, play, exp, mmr, skam, voin1, voin2, voin3, voin4, voin5, voin6, nick, lose, coin, None, None, None, 0, 0, 0, 1, 0))
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 1, 1, 550, 55, 1, 5, 1, 1, 0))
            base.commit()
            await msg.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–µ–¥–∏–Ω–∫–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏', reply_markup=menu, parse_mode='html')
            await msg.answer('–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–Ω—Ñ–æ ‚öôÔ∏è –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã')
            await msg.answer('–ñ–º–∏ –ò–≥—Ä–∞—Ç—å üïπ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Ä–∞–≥–∞!')
        

@dp.callback_query_handler(text='voinsbuy')
async def voin(call: types.CallbackQuery):
    c.execute("SELECT * FROM users WHERE user_id=?",(call.from_user.id,))
    user = c.fetchone()
    if not user:
        await call.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    #
    c.execute("SELECT * FROM voin WHERE voin='1'")
    cur = c.fetchone() 
    voin = ""
    am = 0
    if cur[1] == 2:
        voin = "–ü—É–¥–∂"
        am = 90000
        h = 600
        at = 90
        s = 5
        k = 10
        u = 15
        v = 5 
    elif cur[1] == 3:
        voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        am = 150000
        h = 1250
        at = 120
        s = 10
        k = 10
        u = 10
        v = 10
    elif cur[1] == 4:
        voin = "–ì–∏–≥–∞—á–∞–¥"
        am = 200000
        h = 1500
        at = 500
        s = 15
        k = 20
        u = 20
        v = 15 
    elif cur[1] == 5:
        voin = "–¢–∞–Ω–æ—Å"
        am = 2000000
        h = 6000
        at = 2250
        s = 80
        k = 90
        u = 45
        v = 80 
    elif cur[1] == 6:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        am = 1200000
        h = 2500
        at = 1250
        s = 40
        k = 60
        u = 40
        v = 80 
    elif cur[1] == 7:
        voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        am = 400000
        h = 1250
        at = 500
        s = 25
        k = 50
        u = 30
        v = 60
    elif cur[1] == 8:
        voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        am = 600000
        h = 3200
        at = 550
        s = 8
        k = 40
        u = 55
        v = 20
    elif cur[1] == 9:
        voin = "–ü–µ–ø–µ –ú–∞–≥"
        am = 200000
        h = 2000
        at = 280
        s = 10
        k = 60
        u = 35
        v = 40
    elif cur[1] == 10:
        voin = "–¢–µ–Ω—å"
        am = 1000000
        h = 4500
        at = 1200
        s = 65
        k = 75
        u = 40
        v = 85
    elif cur[1] == 11:
        voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        am = 300000
        h = 2500
        at = 350
        s = 13
        k = 65
        u = 35
        v = 40
    elif cur[1] == 12:
        voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        am = 1250000
        h = 6200
        at = 2250
        s = 80
        k = 80
        u = 65
        v = 90
    elif cur[1] == 13:
        voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
        am = 1100000
        h = 5200
        at = 1350
        s = 80
        k = 70
        u = 70
        v = 80
    elif cur[1] == 14:
        voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
        am = 1560000
        h = 4200
        at = 2600
        s = 44
        k = 70
        u = 30
        v = 80
    elif cur[1] == 15:
        voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
        am = 1420000
        h = 4200
        at = 2200
        s = 80
        k = 70
        u = 40
        v = 60
    elif cur[1] == 16:
        voin = "–ü–∞–π–º–æ–Ω"
        am = 1200000
        h = 3200
        at = 1660
        s = 80
        v = 80
        u = 45
        k = 65
    elif cur[1] == 17:
        voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
        am = 700000
        h = 3000
        at = 900
        s = 80
        u = 30
        k = 60
        v = 80
    elif cur[1] == 18:
        voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
        am = 4200000
        h = 9200
        at = 4200
        s = 80
        v = 80
        u = 45
        k = 80
    elif cur[1] == 19:
        voin = "–ê—Å—Ç–∞"
        am = 1900000
        h = 3400
        at = 1200
        k = 60
        u = 50
        v = 90
    elif cur[1] == 20:
        voin = "–®—Ä–µ–∫"
        am = 2200000
        h = 5600
        at = 2560
        k = 60
        s = 80
        u = 30
        v = 100
        #
    inline = InlineKeyboardMarkup(row_with=2)
    buy = InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å ü•∑', callback_data=f'pbuy:{cur[1]}')
    info = InlineKeyboardButton(text='–ò–Ω—Ñ–æ ‚öôÔ∏è', callback_data=f'infor')
    inline.add(info, buy)
      
    await bot.send_photo(chat_id=call.from_user.id, photo=open(f'/bot/module-deda/bot{cur[1]}.png', 'rb'),
                              caption=f'<b>{voin} | {am} üí∞\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {h}\nüî´ –£—Ä–æ–Ω {at}\nüõ° –ë—Ä–æ–Ω—è {s}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {k}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {u}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {v}%</b>', reply_markup=inline, parse_mode='html')
 
@dp.callback_query_handler(text='infor')
async def cal(call):
    await call.answer('‚öôÔ∏è –ò–Ω—Ñ–æ: –†—ã–Ω–æ–∫ –≤–æ–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 40 –º–∏–Ω—É—Ç', show_alert=True)

@dp.callback_query_handler(lambda call: call.data.startswith('confirm:'))
async def confirm(call):
    id = int(call.data.split(':')[1])
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    user = c.fetchone()
    
    if user:
        await call.message.edit_text('‚ùï –ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞')
        return
    
    if not user:
        c.execute(f'SELECT * FROM users WHERE user_id={id}')
        up = c.fetchone()
        ref = up[6]
        ref += 1
        m = up[1]
        m += 100000
        money = 5000
        voins = 1 
        play = 0
        exp = 500
        mmr = 0
        skam = 0
        voin1 = 550
        voin2 = 55
        voin3 = 1
        voin4 = 5
        voin5 = 1
        voin6 = 1
        nick = call.from_user.first_name
        lose = 0
        coin = 0
        c.execute(f'UPDATE users SET money={m}, skam={ref} WHERE user_id={id}')
        c.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, money, voins, play, exp, mmr, skam, voin1, voin2, voin3, voin4, voin5, voin6, nick, lose, coin, None, None, None, 0, 0, 0, 1, 0))
        c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 1, 1, 550, 55, 1, 5, 1, 1, 0))
        base.commit()
        await call.message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–µ–¥–∏–Ω–∫–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏', reply_markup=menu, parse_mode='html')
        await call.message.answer('–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –ò–Ω—Ñ–æ ‚öôÔ∏è –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã')
        await call.message.answer('–ñ–º–∏ –ò–≥—Ä–∞—Ç—å üïπ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Ä–∞–≥–∞!')
        await bot.send_message(id, f"<b>–í—ã –∑–∞—Å–∫–∞–º–∏–ª–∏ {nick}</b>")
        await bot.send_message(id, f"<b>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ {ref} —á–µ–ª. –ø–æ–ª—É—á–µ–Ω–∞!</b>")
    
@dp.callback_query_handler(lambda query: query.data.startswith('pbuy:'))
async def shop(query):
    user_id = query.from_user.id
    id = int(query.data.split(':')[1])
    c.execute(f'SELECT * FROM users WHERE user_id={user_id}')
    user = c.fetchone()
    money = user[1]
    if id == 2:
        summ = 90000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 2, 0, 600, 90, 5, 10, 15, 5, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ü—É–¥–∂')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
    if id == 3:
        summ = 150000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 3, 0, 1250, 120, 10, 10, 10, 10, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
    
    if id == 4:
        summ = 200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 4, 0, 1500, 500, 15, 20, 20, 15, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ì–∏–≥–∞—á–∞–¥')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 5:
        summ = 2000000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 5, 0, 6000, 2250, 80, 90, 45, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –¢–∞–Ω–æ—Å')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)

    if id == 6:
        summ = 1200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 6, 0, 2500, 1250, 40, 60, 40, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)

    if id == 7:
        summ = 400000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 7, 0, 1250, 500, 25, 50, 30, 60, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)

    if id == 8:
        summ = 600000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 8, 0, 3200, 550, 8, 40, 55, 20, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
 
    if id == 9:
        summ = 200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 9, 0, 2000, 280, 10, 60, 35, 40, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ü–µ–ø–µ –ú–∞–≥')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 10:
        summ = 1000000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 10, 0, 4500, 1200, 65, 75, 40, 85, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –¢–µ–Ω—å')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 11:
        summ = 300000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 11, 0, 2500, 350, 13, 65, 35, 40, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –®–∞–¥–æ—É –§—Ä–µ–Ω–¥')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 12:
        summ = 1200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 12, 0, 6200, 2250, 80, 80, 65, 90, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 13:
        summ = 1100000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 13, 0, 5200, 1350, 80, 70, 70, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 14:
        summ = 1560000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 14, 0, 4200, 2605, 44, 70, 35, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
    
    if id == 15:
        summ = 1420000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 15, 0, 4200, 2220, 80, 70, 40, 60, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 16:
        summ = 1200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 16, 0, 3200, 1660, 80, 65, 45, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ü–∞–π–º–æ–Ω')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
    
    if id == 17:
        summ = 700000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 17, 0, 3000, 900, 80, 60, 30, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
    
    if id == 18:
        summ = 4200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 18, 0, 9200, 4200, 80, 80, 45, 80, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
        
    if id == 19:
        summ = 1900000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 19, 0, 3400, 1200, 80, 60, 50, 90, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –ê—Å—Ç–∞')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)
    
    if id == 20:
        summ = 2200000
        c.execute(f'SELECT * FROM voin WHERE voin="1" AND status={id}')
        st = c.fetchone()
        if not st:
            await query.answer('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚ùï')
            return
        
        c.execute(f'SELECT * FROM pers WHERE user_id={user_id} AND type={id}')
        cut = c.fetchone()
        if not cut:
            if money <  summ:
                await query.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {summ - money} üí∞', show_alert=True)
                return
            c.execute(f'UPDATE users SET money={money - summ} WHERE user_id={user_id}')
            c.execute('INSERT INTO pers VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',(user_id, 20, 0, 5600, 2560, 80, 60, 30, 100, 0))
            base.commit()
            await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{id}.png', 'rb'),
                              caption='–ù–æ–≤—ã–π –≤–æ–∏–Ω! –®—Ä–µ–∫')
            return
        await query.answer('–î–∞–Ω–Ω—ã–π –≤–æ–∏–Ω —É–∂–µ –µ—Å—Ç—å ‚ùï', show_alert=True)

    
@dp.callback_query_handler(text='vampir')
async def hp(call: types.CallbackQuery):
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    voin = cur[2]
    hp = int(cur[12])
    bal = cur[4]
    level = 1
    max_levels = {1: 80, 2: 80, 3: 80, 4: 80, 5: 80, 6: 85, 7: 80, 8: 80, 9: 80, 10: 80, 11: 80, 12: 90, 13: 80, 14: 80, 15: 80, 16: 80, 17: 80, 18: 80, 19: 80, 20: 80}
    
    if hp >= max_levels[voin]:
        await call.answer('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å. —É—Ä–æ–≤–Ω—è ü¶á')
        return

    resurs = hp * 20
    if bal < resurs:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {resurs - bal} üß©')
        return

    summ = int(bal - resurs)
    hpn = cur[12]
    newhp = int(hpn + 1)

    c.execute('UPDATE users SET exp =? WHERE user_id=?',(summ, user_id,))
    c.execute('UPDATE users SET voin6 =? WHERE user_id=?',(newhp, user_id,))
    base.commit()

    ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    attack = cur[8]
    shit = cur[9]
    krit = cur[10]
    uklon = cur[11]
    vampirism = cur[12]
    op = cur[4]
    chosen_voin = ""

    if cur[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif cur[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif cur[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif cur[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif cur[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif cur[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif cur[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif cur[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif cur[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif cur[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif cur[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif cur[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif cur[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif cur[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif cur[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif cur[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif cur[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif cur[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif cur[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif cur[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"

    await call.answer(f'–£—Å–ø–µ—à–Ω–æ! -{resurs} üß©')

    hps = cur[7]
    await call.message.edit_caption(f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hps}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)
    return

@dp.callback_query_handler(text='uklon')
async def hp(call: types.CallbackQuery):
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    voin = cur[2]
    hp = int(cur[11])
    bal = cur[4]
    level = 1
    max_levels = {1: 30, 2: 30, 3: 30, 4: 40, 5: 40, 6: 60, 7: 45, 8: 50, 9: 40, 10: 45, 11: 35, 12: 55, 13: 65, 14: 35, 15: 40, 16: 45, 17: 30, 18: 45, 19: 50, 20: 30}
    
    if hp >= max_levels[voin]:
        await call.answer('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å. —É—Ä–æ–≤–Ω—è ü¶ã')
        return

    resurs = hp * 20
    if bal < resurs:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {resurs - bal} üß©')
        return

    summ = int(bal - resurs)
    hpn = cur[11]
    newhp = int(hpn + 1)

    c.execute('UPDATE users SET exp =? WHERE user_id=?',(summ, user_id,))
    c.execute('UPDATE users SET voin5 =? WHERE user_id=?',(newhp, user_id,))
    base.commit()

    ## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    attack = cur[8]
    shit = cur[9]
    krit = cur[10]
    uklon = cur[11]
    vampirism = cur[12]
    op = cur[4]
    chosen_voin = ""

    if cur[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif cur[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif cur[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif cur[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif cur[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif cur[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif cur[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif cur[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif cur[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif cur[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif cur[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif cur[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif cur[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif cur[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif cur[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif cur[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif cur[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif cur[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif cur[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif cur[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"

    await call.answer(f'–£—Å–ø–µ—à–Ω–æ! -{resurs} üß©')

    hps = cur[7]
    await call.message.edit_caption(f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hps}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)
    return

@dp.callback_query_handler(text='krit')
async def hp(call):
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    hp = int(cur[10])
    bal = cur[4]
    voin = cur[2]
    level = 1
    max_levels = {1: 60, 2: 60, 3: 60, 4: 65, 5: 90, 6: 80, 7: 60, 8: 65, 9: 70, 10: 60, 11: 60, 12: 80, 13: 75, 14: 75, 15: 75, 16: 70, 17: 65, 18: 80, 19: 80, 20: 80}
    
    if hp >= max_levels[voin]:
        await call.answer('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å. —É—Ä–æ–≤–Ω—è üí•')
        return
    
    resurs = hp * 20
    
    if bal < resurs:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {resurs - bal} üß©')
        return
    
    summ = int(bal - resurs)
    hpn = cur[10]
    newhp = int(hpn + 1)
    c.execute('UPDATE users SET exp =? WHERE user_id=?',(summ, user_id,))
    c.execute('UPDATE users SET voin4 =? WHERE user_id=?',(newhp, user_id,))
    base.commit()
    
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    attack = cur[8]
    shit = cur[9]
    krit = cur[10]
    uklon = cur[11]
    vampirism = cur[12]
    op = cur[4]
    chosen_voin = ""

    if cur[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif cur[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif cur[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif cur[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif cur[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif cur[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif cur[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif cur[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif cur[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif cur[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif cur[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif cur[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif cur[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif cur[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif cur[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif cur[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif cur[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif cur[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif cur[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif cur[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"
    
    await call.answer(f'–£—Å–ø–µ—à–Ω–æ! -{resurs} üß©')
    
    
    hps = cur[7]
    await call.message.edit_caption(f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hps}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)
    return

@dp.callback_query_handler(text='shit')
async def hp(call):
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    hp = int(cur[9])
    bal = cur[4]
    level = 1
    voin = cur[2]
    max_levels = {1: 80, 2: 80, 3: 80, 4: 80, 5: 80, 6: 80, 7: 80, 8: 80, 9: 80, 10: 80, 11: 80, 12: 80, 13: 80, 14: 80, 15: 80, 16: 80, 17: 80, 18: 80, 19: 80, 20: 80}
    
    if hp >= max_levels[voin]:
        await call.answer('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å. —É—Ä–æ–≤–Ω—è üõ°')
        return
    
    resurs = hp * 20
    if bal < resurs:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {resurs - bal} üß©')
        return
    
    summ = int(bal - resurs)
    hpn = cur[9]
    newhp = int(hpn + 1)
    
    c.execute('UPDATE users SET exp =? WHERE user_id=?',(summ, user_id,))
    c.execute('UPDATE users SET voin3 =? WHERE user_id=?',(newhp, user_id,))
    base.commit()
    
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    attack = cur[8]
    shit = cur[9]
    krit = cur[10]
    uklon = cur[11]
    vampirism = cur[12]
    op = cur[4]
    chosen_voin = ""

    if cur[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif cur[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif cur[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif cur[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif cur[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif cur[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif cur[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif cur[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif cur[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif cur[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif cur[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif cur[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif cur[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif cur[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif cur[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif cur[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif cur[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif cur[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif cur[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif cur[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"
    
    await call.answer(f'–£—Å–ø–µ—à–Ω–æ! -{resurs} üß©')
    
    hps = cur[7]
    await call.message.edit_caption(f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hps}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)
    return

@dp.callback_query_handler(text='attack')
async def hp(call):
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    hp = int(cur[8] // 1.5)
    bal = cur[4]
    level = 5
    resurs = 0
    
    for i in range(int(hp) - int(level)):
        resurs += int((int(hp) + i + 1) ** 0.25)
        
    if bal < resurs:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {resurs - bal} üß©')
        return
    
    summ = int(bal - resurs)
    hpn = cur[8]
    newhp = int(hpn + 5)
    
    c.execute('UPDATE users SET exp =? WHERE user_id=?',(summ, user_id,))
    c.execute('UPDATE users SET voin2 =? WHERE user_id=?',(newhp, user_id,))
    base.commit()
    
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    attack = cur[8]
    shit = cur[9]
    krit = cur[10]
    uklon = cur[11]
    vampirism = cur[12]
    op = cur[4]
    chosen_voin = ""

    if cur[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif cur[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif cur[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif cur[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif cur[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif cur[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif cur[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif cur[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif cur[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif cur[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif cur[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif cur[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif cur[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif cur[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif cur[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif cur[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif cur[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif cur[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif cur[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif cur[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"
    
    await call.answer(f'–£—Å–ø–µ—à–Ω–æ! -{resurs} üß©')
    
    hps = cur[7]
    await call.message.edit_caption(f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hps}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)
    return resurs

@dp.callback_query_handler(text='hp')
async def hp(call):
    user_id = call.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    hp = int(cur[7] // 10)
    bal = cur[4]
    level = 50
    resurs = 0
    
    for i in range(int(hp) - int(level)):
        resurs += int((int(hp) + i + 1) ** 0.25)
        
    if bal < resurs:
        await call.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {resurs - bal} üß©')
        return
    
    summ = int(bal - resurs)
    hpn = cur[7]
    newhp = int(hpn + 50)
    
    c.execute('UPDATE users SET exp =? WHERE user_id=?',(summ, user_id,))
    c.execute('UPDATE users SET voin1 =? WHERE user_id=?',(newhp, user_id,))
    base.commit()
    
    c.execute('SELECT * FROM users WHERE user_id=?',(user_id,))
    cur = c.fetchone()
    
    attack = cur[8]
    shit = cur[9]
    krit = cur[10]
    uklon = cur[11]
    vampirism = cur[12]
    op = cur[4]
    chosen_voin = ""

    if cur[2] == 1:
        chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
    elif cur[2] == 2:
        chosen_voin = "–ü—É–¥–∂"
    elif cur[2] == 3:
        chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
    elif cur[2] == 4:
        chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
    elif cur[2] == 5:
        chosen_voin = "–¢–∞–Ω–æ—Å"
    elif cur[2] == 6:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
    elif cur[2] == 7:
        chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
    elif cur[2] == 8:
        chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
    elif cur[2] == 9:
        chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
    elif cur[2] == 10:
        chosen_voin = "–¢–µ–Ω—å"
    elif cur[2] == 11:
        chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
    elif cur[2] == 12:
        chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
    elif cur[2] == 13:
        chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
    elif cur[2] == 14:
        chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
    elif cur[2] == 15:
        chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
    elif cur[2] == 16:
        chosen_voin = "–ü–∞–π–º–æ–Ω"
    elif cur[2] == 17:
        chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
    elif cur[2] == 18:
        chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
    elif cur[2] == 19:
        chosen_voin = "–ê—Å—Ç–∞"
    elif cur[2] == 20:
        chosen_voin = "–®—Ä–µ–∫"
    
    await call.answer(f'–£—Å–ø–µ—à–Ω–æ! -{resurs} üß©')
    
    hps = cur[7]
    mmr = cur[18]
    await call.message.edit_caption(f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hps}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%</b>', reply_markup=ups)
    return

@dp.callback_query_handler(text='atr')
async def atr(call):
    await call.message.edit_text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚öôÔ∏è\n\n‚ñ´Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ ‚ù§Ô∏è\n–ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ –ø—Ä–∏–±–∞–ª—è–µ—Ç—Å—è 50 –µ–¥–∏–Ω–∏—Ü, –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n‚ñ´Ô∏è –£—Ä–æ–Ω üî´\n–ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è 5 –µ–¥–∏–Ω–∏—Ü, –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n‚ñ´Ô∏è –ë—Ä–æ–Ω—è üõ°\n–ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ –ø—Ä–∏–±–∞–ª–µ—Ç—Å—è 1 –µ–¥–∏–Ω–∏—Ü–∞, —á–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –±—Ä–æ–Ω–∏ —Ç–µ–º –º–µ–Ω—å—à–µ –æ–Ω–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç —É—Ä–æ–Ω, –∫ –ø—Ä–∏–º–µ—Ä—É 20 –±—Ä–æ–Ω–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç 50 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —É—Ä–æ–Ω–∞, –∞ 60 —Ç–æ–ª—å–∫–æ 75%, –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ 80, –Ω–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∏–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ\n\n‚ñ´Ô∏è –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ üí•\n–ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ –ø—Ä–∏–±–∞–ª—è–µ—Ç—Å—è 1 –ø—Ä–æ—Ü–µ–Ω—Ç, –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Ç–æ –æ–Ω —É–º–Ω–æ–∂–∞–µ—Ç –≤–∞—à —É—Ä–æ–Ω –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5, –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ 60, –Ω–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∏–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ\n\n‚ñ´Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ ü¶ã\n–ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è 1 –ø—Ä–æ—Ü–µ–Ω—Ç, –µ—Å–ª–∏ —à–∞–Ω—Å –ø—Ä–æ–∫–∞–µ—Ç, —Ç–æ –≤—Ä–∞–≥ –Ω–µ –Ω–∞–Ω–µ—Å—ë—Ç —É—Ä–æ–Ω –≤–∞—à–µ–º—É –≤–æ–∏–Ω—É, –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ 30, –Ω–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∏–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ\n\n‚ñ´Ô∏è –í–∞–º–ø–∏—Ä–∏–∑–º ü¶á\n–ø—Ä–∏ –ø—Ä–æ–∫–∞—á–∫–µ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è 1 –ø—Ä–æ—Ü–µ–Ω—Ç, –ø—Ä–∏ –∞—Ç–∞–∫–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –Ω–∞–Ω–µ—Å—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ó–¥–æ—Ä–æ–≤—å–µ, –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏–µ 80, –Ω–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–∏–Ω–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ')

@dp.callback_query_handler(text='give')
async def give(call):
    user_id = call.from_user.id
    await bot.send_message(user_id, f"{user_id}")
    await bot.send_message(user_id, f"–í–æ—Ç –≤–∞—à –∞–π–¥–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ")

@dp.callback_query_handler(text='giveaway')
async def pay_callback_handler(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    user_id = query.from_user.id
    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    user = c.fetchone()
    if not user:
        await query.message.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ, '
                               '–∞–π–¥–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ª—É—á–∏—Ç—å üí∞')
    await GiveState.dialog.set()

@dp.message_handler(state=GiveState.dialog)
async def process_user_id(message: types.Message, state: FSMContext):
    global user2
    user2 = message.text
    c.execute('SELECT * FROM users WHERE user_id=?', (user2,))
    user = c.fetchone()
    if not user:
        await message.answer('<b>–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω, –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>', parse_mode='html')
        await state.finish()
        return
    user_id = message.from_user.id
    if int(message.text) == user_id:
        await message.answer('<b>–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω, –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>', parse_mode='html')
        await state.finish()
        return 

    await message.answer('<b>–ê–π–¥–∏ –Ω–∞–π–¥–µ–Ω!</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å:', parse_mode='html')
    await GiveState.dialog2.set()

@dp.message_handler(state=GiveState.dialog2)
async def process_amount(message: types.Message, state: FSMContext):
    use = message.from_user.id
    try:
        c.execute('SELECT * FROM users WHERE user_id=?',(use,))
        us = c.fetchone()
        money = us[1]
        amount = int(message.text)
    except ValueError:
        await message.answer('<b>üí∞ –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞, –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω√´–Ω.</b>', parse_mode='html')
        await state.finish()
        return
    if amount <= 0:
        await message.answer('<b>üí∞ –°—É–º–º–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞, –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω√´–Ω.</b>', parse_mode='html')
        await state.finish()
        return
    if money < amount:
        await message.answer('üí∞ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω√´–Ω, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!')
        await state.finish()
        return
    global user2
    c.execute('SELECT * FROM users WHERE user_id =?',(user2,))
    unicod = c.fetchone()
    money2 = unicod[1]
    summ2 = money2 + amount
    summ = money - amount
    
    c.execute('UPDATE users SET money =? WHERE user_id=?',(summ, use,))
    c.execute('UPDATE users SET money =? WHERE user_id=?',(summ2, user2,))
    base.commit()

    await message.answer(f'<b>–£—Å–ø–µ—à–Ω–æ!</b>\n-{amount} üí∞', parse_mode='html')
    await state.finish()
    await bot.send_message(user2, f" –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} üí∞")

# mines    

def get_new_field():
    field = [[HIDDEN] * COLS for _ in range(ROWS)]
    mines_positions = random.sample([(i,j) for i in range(ROWS) for j in range(COLS)], MINES)
    return (field, mines_positions)

def render_field(field):
    game_field = InlineKeyboardMarkup()
    for i, row in enumerate(field):
        game_field.row(*[InlineKeyboardButton(text=cell, callback_data=f'{i}_{j}') for j, cell in enumerate(row)])
    return game_field

@dp.message_handler(lambda message: message.text == '–ú–∏–Ω—ã üé≤')
async def casino(message: types.Message):
    if message.chat.type == "supergroup":
        return
    user_id = message.from_user.id
    if user_id in game_data:
        await message.answer('<b>üé≤ –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É ¬´–ú–∏–Ω—ã¬ª</b>')
        return
    if user_id in user_games:
        ('<b>üé≤ –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É ¬´–î–∂–µ–∫–§—Ä—É–∫—Ç¬ª</b>')
        return
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(text=f'{amount} üí∞', callback_data=f'amnt_{amount}') for amount in CASINO_OPTIONS]
    keyboard.add(*buttons)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É üí∞:', reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.split('_')[0] == 'amnt')
async def bet(call: types.CallbackQuery):
    user_id = call.from_user.id
    c.execute('SELECT money FROM users WHERE user_id=?', (user_id,))
    user_money = c.fetchone()[0]
    bet_amount = int(call.data.split('_')[1])
    if user_id in game_data:
        await message.answer('<b>üé≤ –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É ¬´–ú–∏–Ω—ã¬ª</b>')
        return
    if user_id in user_games:
        ('<b>üé≤ –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∏–≥—Ä—É ¬´–î–∂–µ–∫–§—Ä—É–∫—Ç¬ª</b>')
        return
    if bet_amount > user_money:
        await call.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—â–µ {bet_amount - user_money} üí∞", show_alert=True)
    else:
        c.execute('UPDATE users SET money = money - ? WHERE user_id = ?', (bet_amount, user_id,))
        base.commit()
        game_field, mines_positions = get_new_field()
        game_data[user_id] = {'field': game_field, 'mines': mines_positions, 'bet': bet_amount, 'hits': 0, 'last_click': None}
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.send_message(user_id, '<b>–ù–∞–∂–∏–º–∞–π –Ω–∞ –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ!</b>', reply_markup=render_field(game_data[user_id]['field']), parse_mode='html')

#callback_query_handle

@dp.callback_query_handler(lambda c: c.data.startswith('prdnext_'))
async def prdnext_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split('_')
    page = int(data[1])
    id = int(data[2])
    if user_id != id:
        await callback_query.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return

    c.execute('SELECT * FROM prd WHERE user_id=?', (user_id,))
    fighters = c.fetchall()

    change_kb = InlineKeyboardMarkup()

    fighters = sorted(fighters, key=lambda x: x[2], reverse=True)
    row = []
    start = (page - 1) * 12
    end = start + 12
    for fighter in fighters[start:end]:
        fighter_id = fighter[1]
        reg = fighter[2]

        name = get_prds(fighter_id)
        redk = get_redk(reg)
        if fighter[3] != 0:
                fighter_name = f"üñê{name}{redk}"
        else:
            fighter_name = f"{name}{redk}"

        button = InlineKeyboardButton(text=fighter_name, callback_data=f'prd_{fighter_id}_{fighter[4]}_{reg}_{page}_{user_id}')
        row.append(button)

        if len(row) == 3:
            change_kb.row(*row)
            row = []

    if row:
        change_kb.row(*row)

    total_pages = (len(fighters) + 11) // 12
    if len(fighters) > 12:
        if page > 1:
            change_kb.row(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'prdprev_{page-1}_{user_id}'),
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{page}_{user_id}'),
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'prdnext_{"1" if page >= total_pages else page+1}_{user_id}')
            )
        else:
            change_kb.row(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'prdprev_{total_pages}_{user_id}'),
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{page}_{user_id}'),
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'prdnext_2_{user_id}')
            )
    else:
        change_kb.row(InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{page}_{user_id}'))

    await callback_query.message.edit_text('<b>–¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ‚ùï</b>', reply_markup=change_kb, parse_mode='html')

@dp.callback_query_handler(lambda c: c.data.startswith('prdprev_'))
async def prdprev_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split('_')
    page = int(data[1])
    id = int(data[2])
    if user_id != id:
        await callback_query.answer('‚ùó –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!')
        return

    c.execute('SELECT * FROM prd WHERE user_id=?', (user_id,))
    fighters = c.fetchall()

    change_kb = InlineKeyboardMarkup()

    fighters = sorted(fighters, key=lambda x: x[2], reverse=True)
    row = []
    start = (page - 1) * 12
    end = start + 12
    for fighter in fighters[start:end]:
        fighter_id = fighter[1]
        reg = fighter[2]

        name = get_prds(fighter_id)
        redk = get_redk(reg)
        if fighter[3] != 0:
                fighter_name = f"üñê{name}{redk}"
        else:
            fighter_name = f"{name}{redk}"

        button = InlineKeyboardButton(text=fighter_name, callback_data=f'prd_{fighter_id}_{fighter[4]}_{reg}_{page}_{user_id}')
        row.append(button)

        if len(row) == 3:
            change_kb.row(*row)
            row = []

    if row:
        change_kb.row(*row)

    total_pages = (len(fighters) + 11) // 12
    if len(fighters) > 12:
        if page > 1:
            change_kb.row(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'prdprev_{page-1}_{user_id}'),
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{page}_{user_id}'),
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'prdnext_{"1" if page >= total_pages else page+1}_{user_id}')
            )
        else:
            change_kb.row(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'prdprev_{total_pages}_{user_id}'),
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{page}_{user_id}'),
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'prdnext_{page+1}_{user_id}')
            )
    else:
        change_kb.row(InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_{page}_{user_id}'))

    await callback_query.message.edit_text('<b>–¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ‚ùï</b>', reply_markup=change_kb, parse_mode='html')

@dp.callback_query_handler(lambda call: call.data.split('_')[0] not in 'amnt')
async def casino(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in game_data:
        await call.message.edit_text('<b>–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ ‚ùï</b>', parse_mode='html')
        return

    row, col = map(int, call.data.split('_'))

    last_click = game_data[user_id].get('last_click', None)
    if last_click:
        l_row, l_col = last_click
        game_data[user_id]['field'][l_row][l_col] = HIDDEN

    if (row, col) == last_click:
        return
    else:
        game_data[user_id]['last_click'] = (row, col)
        game_field, mines_positions = get_new_field() 
        game_data[user_id]['field'] = game_field
        game_data[user_id]['mines'] = mines_positions
        if (row, col) in game_data[user_id]['mines']:
            reward = int(0.50* game_data[user_id]['bet'] * game_data[user_id]['hits'])
            c.execute('UPDATE users SET money = money + ? WHERE user_id = ?', (reward, user_id,))
            base.commit()
            await call.message.edit_text(f"<b>–í—ã –ø–æ–¥–æ—Ä–≤–∞–ª–∏—Å—å</b> üí•\n–ü–æ–ø–∞–¥–∞–Ω–∏–π: {game_data[user_id]['hits']}\n\n+{reward} üí∞", parse_mode='html')
            del game_data[user_id]  
        else:
            game_data[user_id]['field'][row][col] = SAFE 
            game_data[user_id]['hits'] += 1
            await call.message.edit_text(f'<b>–ù–∞–∂–∏–º–∞–π –Ω–∞ –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ!</b>\n–ü–æ–ø–∞–¥–∞–Ω–∏–π: {game_data[user_id]["hits"]}', reply_markup=render_field(game_data[user_id]['field']), parse_mode='html')


@dp.message_handler(content_types=['text'])
async def text(msg):
    m = msg.text.lower()
    if m == "–í–∏—Ç—Ä–∏–Ω–∞ ‚ùÑ":
        user_id = msg.from_user.id
        if msg.chat.type == "supergroup":
            return
        c.execute('SELECT * FROM users WHERE user_id =?',(user_id,))
        user = c.fetchone()
        if not user:
            await msg.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return
        await msg.answer()
        
        
    if m == '–ø—Ä–æ—Ñ–∏–ª—å üñº':
        user_id = msg.from_user.id
        name = msg.from_user.first_name
        if msg.chat.type == "supergroup":
            return
        c.execute('SELECT * FROM users WHERE user_id =?',(user_id,))
        user = c.fetchone()
        if not user:
            await msg.answer('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return
        c.execute("SELECT * FROM users ORDER BY mmr DESC LIMIT 30")
        users = c.fetchall()
        money = user[1]
        c.execute(f'SELECT COUNT(*) FROM pers WHERE user_id={user_id}')
        voins = c.fetchone()[0]
        play = user[3]
        exp = user[4]
        mmr = user[5]
        skam = user[6]
        lose = user[14]
        coin = user[15]
        wins = play - lose
        
        if play != 0:
            win = (wins / play) * 100
        else:
            win = 0
        
        stats = (
            f'{name}\n\n'
            f'üî∞ {get_user_place(user_id, users)} —Ä–∞–Ω–≥\n'
            f'üèÜ {mmr} MMR\n\n'
            f'üî∑ –°—ã–≥—Ä–∞–Ω–æ –±–æ–µ–≤: {play}\n'
            f'üî∂ –î–æ–ª—è –ø–æ–±–µ–¥: {win:.1f}%\n\n'
            f'ü•∑ –í–æ–∏–Ω—ã {voins} / 20\n'
            f'üí∞ –ó–æ–ª–æ—Ç–æ {money}\n'
            f'üíé –ö–æ–∏–Ω—ã: {coin} —à—Ç.\n'
            f'üß© –û–ø—ã—Ç {exp}\n\n'
            f'üßë‚Äçüíª –ó–∞—Å–∫–∞–º–ª–µ–Ω–æ –ª—é–¥–µ–π {skam}'
            )
            
        await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/profile.png', 'rb'),
                              caption=stats, parse_mode='html', reply_markup=pay)
    if m == "–∏–Ω—Ñ–æ ‚öôÔ∏è":
        user_id = msg.from_user.id
        name = msg.from_user.first_name
        if msg.chat.type == "supergroup":
            return 
        await msg.answer('<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> ‚öôÔ∏è\n\n‚ñ´Ô∏è <b>–ò–≥—Ä–∞—Ç—å</b> üïπ\n–¢—É—Ç –≤—Ä–∞–≥–∏ –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –ø–æ —Ç–≤–æ–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ MMR.\n\n‚ñ´Ô∏è <b>–î—É—ç–ª—å</b> ‚öîÔ∏è\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–∞—Ç—å –≤ –±–æ–π —Å —Å–æ–±–æ–π –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∞.\n\n‚ñ´Ô∏è <b>–í–æ–∏–Ω—ã</b> ü•∑\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–≥–æ –≤–æ–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –µ—Å—Ç—å –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç—ã.\n\n‚ñ´Ô∏è <b>–ê—Ç—Ä–∏–±—É—Ç—ã ü™ñ</b>\n–í–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è –ó–¥–æ—Ä–æ–≤—å–µ, —É—Ä–æ–Ω, –±—Ä–æ–Ω—é, —à–∞–Ω—Å –∫—Ä–∏—Ç–∞, —É–∫–ª–æ–Ω–µ–Ω–∏–µ, –≤–∞–º–ø–∏—Ä–∏–∑–º. –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∏—Ö –º–æ–∂–Ω–æ –≤ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.', parse_mode='html', reply_markup=info)
    if m == "–≤–æ–∏–Ω—ã ü•∑":
        user_id = msg.from_user.id
        if msg.chat.type == "supergroup":
            return
        c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
        user = c.fetchone()
        hp = user[7]
        attack = user[8]
        shit = user[9]
        krit = user[10]
        phot = user[2]
        uklon = user[11]
        vampirism = user[12]
        op = user[4]
        chosen_voin = ""
        if user[2] == 1:
            chosen_voin = "–ß–º–æ–Ω—è –ì–∞—Ç—Å"
        elif user[2] == 2:
            chosen_voin = "–ü—É–¥–∂"
        elif user[2] == 3:
            chosen_voin = "–ö–æ—Ä–æ–ª—å –í–∞—Ä–≤–∞—Ä–æ–≤"
        elif user[2] == 4:
            chosen_voin = "–ì–∏–≥–∞—á–∞–¥"
        elif user[2] == 5:
            chosen_voin = "–¢–∞–Ω–æ—Å"
        elif user[2] == 6:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –∫–ª—ã–∫"
        elif user[2] == 7:
            chosen_voin = "–ü–µ–ø–µ –ü—Å–∏—Ö–æ–ø–∞—Ç"
        elif user[2] == 8:
            chosen_voin = "–ü–µ–ø–µ –ê—Ä—Ö–∏–º–∞–≥"
        elif user[2] == 9:
            chosen_voin = "–ü–µ–ø–µ –ú–∞–≥"
        elif user[2] == 10:
            chosen_voin = "–¢–µ–Ω—å"
        elif user[2] == 11:
            chosen_voin = "–®–∞–¥–æ—É –§—Ä–µ–Ω–¥"
        elif user[2] == 12:
            chosen_voin = "–°–ª–µ–Ω–¥–µ—Ä–º–µ–Ω"
        elif user[2] == 13:
            chosen_voin = "–ß–µ–ª–æ–≤–µ–∫ –ü–∞—É–∫"
        elif user[2] == 14:
            chosen_voin = "–ö–æ—Ç –≤ –°–∞–ø–æ–≥–∞—Ö"
        elif user[2] == 15:
            chosen_voin = "–ì—Ä–æ–∑–Ω–∞—è –ü–∞–π–º–æ–Ω"
        elif user[2] == 16:
            chosen_voin = "–ü–∞–π–º–æ–Ω"
        elif user[2] == 17:
            chosen_voin = "–ü–µ–ø–µ –ë–∞–Ω–¥–∏—Ç"
        elif user[2] == 18:
            chosen_voin = "–°—Ç–∞–ª—å–Ω–æ–π –ì—Ä–æ–º"
        elif user[2] == 19:
            chosen_voin = "–ê—Å—Ç–∞"
        elif user[2] == 20:
            chosen_voin = "–®—Ä–µ–∫"
        

        await bot.send_photo(chat_id=user_id, photo=open(f'/bot/module-deda/bot{phot}.png', 'rb'),
                              caption=f'<b>{chosen_voin} | üß© –û–ø—ã—Ç {op}\n\n‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ {hp}\nüî´ –£—Ä–æ–Ω {attack}\nüõ° –ë—Ä–æ–Ω—è {shit}\nüí• –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ {krit}%\nü¶ã –£–∫–ª–æ–Ω–µ–Ω–∏–µ {uklon}%\nü¶á –í–∞–º–ø–∏—Ä–∏–∑–º {vampirism}%\n</b>',
                                reply_markup=ups)
    
    if m == "—Å–∫–∞–º üí∏":
        if msg.chat.type == "supergroup":
            return
        id = msg.from_user.id
        keb = InlineKeyboardMarkup()
        ik = InlineKeyboardButton(text='üë®‚Äçüíª –¢–æ–ø —Å–∫–∞–º–µ—Ä–æ–≤', callback_data='topref')
        keb.add(ik)
        await bot.send_photo(chat_id=id, photo=open(f'/bot/module-deda/skam.png', 'rb'),
                              caption=f'<b>–ï—Å–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞–π–¥–µ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\nüü¢ C—Å—ã–ª–∫–∞ -</b> <code>https://t.me/c3rfbbot?start={id}</code>\n\nüí∞ <b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 100k –∑–æ–ª–æ—Ç–∞.</b>', reply_markup=keb)
        return
    #
    if m == "—Ä—ã–Ω–æ–∫ ‚õ©Ô∏è":
        if msg.chat.type == 'supergroup':
            return
        user_id = msg.from_user.id
        await msg.answer('<b>–†—ã–Ω–æ–∫ ‚õ©</b>', parse_mode='html', reply_markup=place)
    if m == ".–∏–¥":
        if msg.reply_to_message:
            id = msg.reply_to_message.from_user.id
            await msg.reply(f'<b>üÜî –ò–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{id}</code>')
            return
        else:
            id = msg.from_user.id
            await msg.reply(f'<b>üÜî –í–∞—à –∏–¥:</b> <code>{id}</code>')
            return
    if m == "–∫–∞–∑–∏–Ω–æ üé≤":
        if msg.chat.type == "supergroup":
            return
        await msg.answer('<b>–ö–∞–∑–∏–Ω–æ üé≤</b>:', reply_markup=men2)
    
    if m == "–Ω–∞–∑–∞–¥ üîô":
        if msg.chat.type == 'supergroup':
            return
        await msg.answer('<b>üïπ –ú–µ–Ω—é:</b>', reply_markup=menu)
        
    if m == "–ø—Ä–¥":
        user_id = msg.from_user.id
        c.execute('SELECT * FROM prd WHERE user_id=?', (user_id,))
        fighters = c.fetchall()

        change_kb = InlineKeyboardMarkup()

        fighters = sorted(fighters, key=lambda x: x[2], reverse=True)
        row = []
        for fighter in fighters[:12]:
            fighter_id = fighter[1]
            reg = fighter[2]

            name = get_prds(fighter_id)
            redk = get_redk(reg)
            if fighter[3] != 0:
                fighter_name = f"üñê{name}{redk}"
            else:
                fighter_name = f"{name}{redk}"
                
            button = InlineKeyboardButton(text=fighter_name, callback_data=f'prd_{fighter_id}_{fighter[4]}_{reg}_1_{user_id}')
            row.append(button)

            if len(row) == 3:
                change_kb.row(*row)
                row = []

        if row:
            change_kb.row(*row)

        total_pages = (len(fighters) + 11) // 12
        if len(fighters) > 12:
            change_kb.row(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'prdprev_{total_pages}_{user_id}'),
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_1_{user_id}'),
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥", callback_data=f'prdnext_2_{user_id}')
            )
        else:
            change_kb.row(
                InlineKeyboardButton(text="–°–ª–æ—Ç—ã", callback_data=f'slots_1_{user_id}')
                )

        await msg.reply('<b>–¢–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã ‚ùï</b>', reply_markup=change_kb, parse_mode='html')
        
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)